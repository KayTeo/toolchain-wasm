   1: ~+0(this=0x32a300081a25 <JSGlobalProxy>) {
   2:  ~+0(this=0x32a300081a25 <JSGlobalProxy>) {
   2:  } -> 0x32a300000011 <undefined>
00 61 73 6d 01 00 00 00 01 Section: Type
Decode Section 0x60485db42f5a - 0x60485db42f6a
DecodeType[0] module+1
60   +13  value type          : 1 bytes
  +15  value type          : 1 bytes
DecodeType[1] module+6
60   +18  value type          : 1 bytes
  +19  value type          : 1 bytes
  +21  value type          : 1 bytes
DecodeType[2] module+12
60   +25  value type          : 1 bytes
  +10  skip                : 16 bytes
02 Section: Import
Decode Section 0x60485db42f6c - 0x60485db42f7c
DecodeImportTable[0] module+1
  +30  module name         : 3 bytes
  +34  field name          : 6 bytes
02   +41  memory limits flags : 03 = 3
  +28  skip                : 16 bytes
03 Section: Function
Decode Section 0x60485db42f7e - 0x60485db42f89
  +47  signature index     : 00 = 0
  +48  signature index     : 00 = 0
  +49  signature index     : 01 = 1
  +50  signature index     : 00 = 0
  +51  signature index     : 01 = 1
  +52  signature index     : 00 = 0
  +53  signature index     : 01 = 1
  +54  signature index     : 01 = 1
  +55  signature index     : 02 = 2
  +56  signature index     : 01 = 1
  +46  skip                : 11 bytes
07 Section: Export
Decode Section 0x60485db42f8c - 0x60485db43056
DecodeExportTable[0] module+1
  +62  field name          : 16 bytes
00 DecodeExportTable[1] module+20
  +81  field name          : 23 bytes
00 DecodeExportTable[2] module+46
  +107  field name          : 19 bytes
00 DecodeExportTable[3] module+68
  +129  field name          : 8 bytes
00 DecodeExportTable[4] module+79
  +140  field name          : 10 bytes
00 DecodeExportTable[5] module+92
  +153  field name          : 21 bytes
00 DecodeExportTable[6] module+116
  +177  field name          : 12 bytes
00 DecodeExportTable[7] module+131
  +192  field name          : 17 bytes
00 DecodeExportTable[8] module+151
  +212  field name          : 21 bytes
00 DecodeExportTable[9] module+175
  +236  field name          : 24 bytes
00   +60  skip                : 202 bytes
0a Section: Code
Decode Section 0x60485db43059 - 0x60485db431e7
  +267  function body       : 20 bytes
  +288  function body       : 10 bytes
  +299  function body       : 40 bytes
  +340  function body       : 8 bytes
  +349  function body       : 50 bytes
  +400  function body       : 14 bytes
  +415  function body       : 84 bytes
  +500  function body       : 84 bytes
  +585  function body       : 39 bytes
  +625  function body       : 38 bytes
  +265  skip                : 398 bytes
  +0  module header       : 8 bytes
  +8  uint8_t             : 01 = 1
  +9  section size        : 10 = 16
  +10  section payload     : 16 bytes
  +26  uint8_t             : 02 = 2
  +27  section size        : 10 = 16
  +28  section payload     : 16 bytes
  +44  uint8_t             : 03 = 3
  +45  section size        : 0b = 11
  +46  section payload     : 11 bytes
  +57  uint8_t             : 07 = 7
  +58  section size        : ca 01 = 202
  +60  section payload     : 202 bytes
  +262  uint8_t             : 0a = 10
  +263  section size        : 8e 03 = 398
local decls count: 0
local decls count: 0
  +267  skip                : 1 bytes
local decls count: 1
local decls count: 0
wasm-decode 0x60485db4305b...0x60485db4306f (module+268, 20 bytes)
  +288  skip                : 1 bytes
wasm-decode 0x60485db43070...0x60485db4307a (module+289, 10 bytes)
  +340  skip                : 1 bytes
wasm-decode 0x60485db430a4...0x60485db430ac (module+341, 8 bytes)
  +299  skip                : 3 bytes
wasm-decode 0x60485db4307b...0x60485db430a3 (module+302, 40 bytes)
  @1        #local.get                     | B1 |  i
  @3        #i32.const                     | B1 |  i
  @1        #local.get                     | B1 |  i
  @1        #local.get                     | B1 |  i
  @3        #i32.const                     | B1 |  i i
  @3        #local.get                     | B1 |  i i
  @5        #local.set                     | B1 | 
  @5        #i32.load                      | B1 |  i i
  @5        #i32.atomic.rmw.add            | B1 |  i
  @8        #i32.const                     | B1 |  i i i
  @10       #i32.add                       | B1 |  i i
  @9        #end                           |
  @9        #(implicit) return             |  | 
wasm-decode ok

  @11       #i32.store                     | B1 | 
  @14       #local.get                     | B1 |  i
  @16       #i32.load                      | B1 |  i
  @19       #end                           |
  @19       #(implicit) return             |  | 
wasm-decode ok

local decls count: 1
local decls count: 1
  +349  skip                : 3 bytes
wasm-decode 0x60485db430ad...0x60485db430df (module+352, 50 bytes)
  +400  skip                : 3 bytes
wasm-decode 0x60485db430e0...0x60485db430ee (module+403, 14 bytes)
  @3        #i32.const                     | B1 |  i
  @3        #local.get                     | B1 |  i
  @5        #local.set                     | B1 | 
  @5        #i32.const                     | B1 |  i i
  @7        #loop                          | B1L0 | 
  @9        #local.get                     | B1L0 |  i
  @7        #i32.atomic.store              | B1 | 
  @11       #local.get                     | B1 |  i
  @13       #end                           |
  @13       #(implicit) return             |  | 
wasm-decode ok

  @11       #i32.atomic.load               | B1L0 |  i
  @15       #local.set                     | B1L0 | 
  @17       #local.get                     | B1L0 |  i
local decls count: 1
  @19       #i32.const                     | B1L0 |  i i
  +415  skip                : 3 bytes
wasm-decode 0x60485db430ef...0x60485db43143 (module+418, 84 bytes)
  @21       #i32.add                       | B1L0 |  i
  @3        #i32.const                     | B1 |  i
  @22       #local.set                     | B1L0 | 
  @5        #local.set                     | B1 | 
  @24       #local.get                     | B1L0 |  i
  @26       #local.get                     | B1L0 |  i i
  @7        #loop                          | B1L0 | 
  @9        #local.get                     | B1L0 |  i
  @28       #i32.atomic.store              | B1L0 | 
  @32       #local.get                     | B1L0 |  i
  @34       #i32.const                     | B1L0 |  i i
  @11       #i32.const                     | B1L0 |  i i
  @36       #i32.add                       | B1L0 |  i
  @3        #i32.atomic.load               | B1 |  i
  @37       #local.set                     | B1L0 | 
  @15       #i32.atomic.store              | B1L0 | 
  @39       #local.get                     | B1L0 |  i
  @19       #local.get                     | B1L0 |  i
  @41       #local.get                     | B1L0 |  i i
  @21       #i32.const                     | B1L0 |  i i
  @7        #loop                          | B1L0 | 
  @43       #i32.lt_u                      | B1L0 |  i
  @24       #i32.atomic.store              | B1L0 | 
  @7        #end                           |
  @7        #(implicit) return             |  | 
wasm-decode ok

  @28       #local.get                     | B1L0 |  i
  @9        #local.get                     | B1L0 |  i
  @30       #i32.const                     | B1L0 |  i i
  @11       #i32.const                     | B1L0 |  i i
  @44       #br_if                         | B1L0 | 
  @34       #i32.atomic.store              | B1L0 | 
local decls count: 1
  @38       #local.get                     | B1L0 |  i
  @40       #i32.const                     | B1L0 |  i i
  @46       #end                           | B1 | 
  +500  skip                : 3 bytes
  @13       #i32.atomic.rmw.add            | B1L0 |  i
  @47       #local.get                     | B1 |  i
wasm-decode 0x60485db43144...0x60485db43198 (module+503, 84 bytes)
  @43       #i32.atomic.store              | B1L0 | 
  @49       #end                           |
  @49       #(implicit) return             |  | 
wasm-decode ok

  @47       #local.get                     | B1L0 |  i
  @17       #drop                          | B1L0 | 
  @3        #i32.const                     | B1 |  i
  @49       #i32.const                     | B1L0 |  i i
  @53       #i32.atomic.store              | B1L0 | 
  @18       #local.get                     | B1L0 |  i
  @57       #local.get                     | B1L0 |  i
  @20       #i32.const                     | B1L0 |  i i
  @59       #i32.const                     | B1L0 |  i i
  @22       #i32.add                       | B1L0 |  i
local decls count: 1
  @23       #local.set                     | B1L0 | 
  @62       #i32.atomic.store              | B1L0 | 
  +585  skip                : 3 bytes
  @66       #local.get                     | B1L0 |  i
  @25       #local.get                     | B1L0 |  i
wasm-decode 0x60485db43199...0x60485db431c0 (module+588, 39 bytes)
  @68       #i32.const                     | B1L0 |  i i
  @5        #local.set                     | B1 | 
  @27       #local.get                     | B1L0 |  i i
  @3        #i32.const                     | B1 |  i
  @70       #i32.add                       | B1L0 |  i
  @29       #i32.lt_u                      | B1L0 |  i
  @7        #loop                          | B1L0 | 
  @5        #local.set                     | B1 | 
  @71       #local.set                     | B1L0 | 
  @30       #br_if                         | B1L0 | 
  @73       #local.get                     | B1L0 |  i
  @9        #local.get                     | B1L0 |  i
  @32       #end                           | B1 | 
  @7        #loop                          | B1L0 | 
  @75       #local.get                     | B1L0 |  i i
  @33       #local.get                     | B1 |  i
  @11       #i32.const                     | B1L0 |  i i
  @9        #i32.const                     | B1L0 |  i
  @77       #i32.lt_u                      | B1L0 |  i
  @78       #br_if                         | B1L0 | 
  @11       #i32.const                     | B1L0 |  i i
  @35       #i32.atomic.load               | B1 |  i
  @15       #i32.atomic.store              | B1L0 | 
  @80       #end                           | B1 | 
  @39       #end                           |
  @39       #(implicit) return             |  | 
wasm-decode ok

  @81       #local.get                     | B1 |  i
  @19       #local.get                     | B1L0 |  i
  @15       #i32.atomic.store              | B1L0 | 
  @83       #end                           |
  @83       #(implicit) return             |  | 
wasm-decode ok

  @21       #i32.const                     | B1L0 |  i i
  @19       #local.get                     | B1L0 |  i
local decls count: 1
  @21       #i32.const                     | B1L0 |  i i
  @25       #i32.atomic.store              | B1L0 | 
  +625  skip                : 3 bytes
  @23       #i32.add                       | B1L0 |  i
  @29       #local.get                     | B1L0 |  i
wasm-decode 0x60485db431c1...0x60485db431e7 (module+628, 38 bytes)
  @31       #i32.const                     | B1L0 |  i i
  @3        #i32.const                     | B1 |  i
  @24       #local.set                     | B1L0 | 
  @5        #local.set                     | B1 | 
  @34       #i32.atomic.store              | B1L0 | 
  @26       #local.get                     | B1L0 |  i
  @28       #i32.const                     | B1L0 |  i i
  @38       #local.get                     | B1L0 |  i
  @7        #loop                          | B1L0 | 
  @32       #i32.lt_u                      | B1L0 |  i
  @33       #br_if                         | B1L0 | 
  @40       #i32.const                     | B1L0 |  i i
  @9        #local.get                     | B1L0 |  i
  @35       #end                           | B1 | 
  @36       #local.get                     | B1 |  i
  @11       #local.get                     | B1L0 |  i i
  @38       #end                           |
  @38       #(implicit) return             |  | 
wasm-decode ok

  @43       #i32.atomic.store              | B1L0 | 
  @13       #i32.const                     | B1L0 |  i i i
  @47       #local.get                     | B1L0 |  i
  @15       #i32.add                       | B1L0 |  i i
  @49       #i32.const                     | B1L0 |  i i
  @16       #i32.atomic.store              | B1L0 | 
  @52       #i32.atomic.store              | B1L0 | 
  @20       #local.get                     | B1L0 |  i
  @56       #local.get                     | B1L0 |  i
  @22       #i32.const                     | B1L0 |  i i
  @58       #i32.const                     | B1L0 |  i i
  @24       #i32.add                       | B1L0 |  i
  @62       #i32.atomic.store              | B1L0 | 
  @25       #local.set                     | B1L0 | 
  @66       #local.get                     | B1L0 |  i
  @27       #local.get                     | B1L0 |  i
  @68       #i32.const                     | B1L0 |  i i
  @29       #local.get                     | B1L0 |  i i
  @70       #i32.add                       | B1L0 |  i
  @31       #i32.lt_u                      | B1L0 |  i
  @71       #local.set                     | B1L0 | 
  @32       #br_if                         | B1L0 | 
  @73       #local.get                     | B1L0 |  i
  @34       #end                           | B1 | 
  @75       #local.get                     | B1L0 |  i i
  @35       #local.get                     | B1 |  i
  @37       #end                           |
  @37       #(implicit) return             |  | 
  @77       #i32.lt_u                      | B1L0 |  i
wasm-decode ok

  @78       #br_if                         | B1L0 | 
  @80       #end                           | B1 | 
  @81       #local.get                     | B1 |  i
  @83       #end                           |
  @83       #(implicit) return             |  | 
wasm-decode ok

  +0  module header       : 8 bytes
  +8  uint8_t             : 01 = 1
  +9  section size        : 10 = 16
  +10  section payload     : 16 bytes
  +26  uint8_t             : 02 = 2
  +27  section size        : 10 = 16
  +28  section payload     : 16 bytes
  +44  uint8_t             : 03 = 3
  +45  section size        : 0b = 11
  +46  section payload     : 11 bytes
  +57  uint8_t             : 07 = 7
  +58  section size        : ca 01 = 202
  +60  section payload     : 202 bytes
  +262  uint8_t             : 0a = 10
  +263  section size        : 8e 03 = 398
   2:  ~main+15(this=0x32a300081a25 <JSGlobalProxy>) {
   3:   ~runWorkers+15(this=0x32a300081a25 <JSGlobalProxy>, 0x32a300289a15 <Module map = 0x32a30008fbb5>, 0x32a300099e0d <Memory map = 0x32a30008ff39>, 0x32a300099c5d <JSFunction workerCode (sfi = 0x32a3000999e9)>, 5) {
   1: ~+0(this=0x32a300441a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x32a300441a25 <JSGlobalProxy>) {
   2:  } -> 0x32a300000011 <undefined>
   1: } -> 0x32a300000011 <undefined>
   4:    ~sendMessageToWorker+24(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028b5e5 <Object map = 0x32a30009a1ed>, 0x32a300289be5 <Worker map = 0x32a300095ea9>) {
   6:      ~+9(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028b72d <JSFunction (sfi = 0x32a3002511e5)>, 0x32a30028b749 <JSFunction (sfi = 0x32a300251215)>) {
   6:      } -> 0x32a300000011 <undefined>
   4:    } -> 0x32a30028b6a1 <Promise map = 0x32a3000899ad>
   4:    ~sendMessageToWorker+24(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028b839 <Object map = 0x32a30009a1ed>, 0x32a30028a155 <Worker map = 0x32a300095ea9>) {
   6:      ~+9(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028b931 <JSFunction (sfi = 0x32a3002511e5)>, 0x32a30028b94d <JSFunction (sfi = 0x32a300251215)>) {
   6:      } -> 0x32a300000011 <undefined>
   4:    } -> 0x32a30028b8a5 <Promise map = 0x32a3000899ad>
   1: ~onmessage+0(this=0x32a300441a25 <JSGlobalProxy>, 0x32a3000c9011 <Object map = 0x32a300459b19>) {
   4:    ~sendMessageToWorker+24(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028b9a9 <Object map = 0x32a30009a1ed>, 0x32a30028a679 <Worker map = 0x32a300095ea9>) {
   6:      ~+9(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028baa1 <JSFunction (sfi = 0x32a3002511e5)>, 0x32a30028babd <JSFunction (sfi = 0x32a300251215)>) {
   6:      } -> 0x32a300000011 <undefined>
   4:    } -> 0x32a30028ba15 <Promise map = 0x32a3000899ad>
   4:    ~sendMessageToWorker+24(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028bb19 <Object map = 0x32a30009a1ed>, 0x32a30028ab9d <Worker map = 0x32a300095ea9>) {
   6:      ~+9(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028bc11 <JSFunction (sfi = 0x32a3002511e5)>, 0x32a30028bc2d <JSFunction (sfi = 0x32a300251215)>) {
   6:      } -> 0x32a300000011 <undefined>
   4:    } -> 0x32a30028bb85 <Promise map = 0x32a3000899ad>
local decls count: 1
  +415  skip                : 3 bytes
wasm-decode 0x60485db430ef...0x60485db43143 (module+418, 84 bytes)
[]; [i32:s0x24, i32:s0x28, i32:c0, i32:c0]
  @3        #i32.const                     | B1 |  i
[]; [i32:s0x24, i32:s0x28, i32:c0, i32:c0, i32:c0]
  @5        #local.set                     | B1 | 
[]; [i32:s0x24, i32:s0x28, i32:c0, i32:c0]
  @7        #loop                          | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @9        #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @11       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c31414]
[DEBUG]AtomicOp called
[DEBUG] AtomicStore emitting xchgl
  @15       #i32.atomic.store              | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @19       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @21       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c161]
[DEBUG]AtomicOp called
[DEBUG] AtomicStore emitting xchgl
  @24       #i32.atomic.store              | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @28       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @30       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c31414]
[DEBUG]AtomicOp called
[DEBUG] AtomicStore emitting xchgl
  @34       #i32.atomic.store              | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @38       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @40       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c161]
[DEBUG]AtomicOp called
[DEBUG] AtomicStore emitting xchgl
  @43       #i32.atomic.store              | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @47       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @49       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c31414]
[DEBUG]AtomicOp called
[DEBUG] AtomicStore emitting xchgl
  @53       #i32.atomic.store              | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @57       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @59       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c161]
[DEBUG]AtomicOp called
[DEBUG] AtomicStore emitting xchgl
  @62       #i32.atomic.store              | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @66       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @68       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c1]
  @70       #i32.add                       | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @71       #local.set                     | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30]
  @73       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30, i32:rax]
  @75       #local.get                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30, i32:rax, i32:rcx]
  @77       #i32.lt_u                      | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30, i32:rax, i32:rcx]
   4:      @78       #br_if                         | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rbx, i32:s0x30]
  @80       #end                           | B1 | 
[]; [i32~:s0x24, i32:s0x28, i32:rbx, i32:s0x30]
  @81       #local.get                     | B1 |  i
[]; [i32:s0x24, i32:s0x28, i32:rbx, i32:s0x30, i32:rax]
  @83       #end                           |
  @83       #(implicit) return             |  | 
sendMessageToWorker+24(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028bc89 <Object map = 0x32a30009a1ed>, 0x32a30028b0c1 <Worker map = 0x32a300095ea9>) {
wasm-decode ok

  +0  module header       : 8 bytes
01   +10  skip                : 16 bytes
02   +28  skip                : 16 bytes
03   +46  skip                : 11 bytes
07   +60  skip                : 202 bytes
0a   +265  skip                : 398 bytes
--- WebAssembly code ---
name: wasm-function[6]
index: 6
kind: wasm function
compiler: Liftoff
Body (size = 1536 = 1484 + 52 padding)
Instructions (size = 1468)
0x8c6839e5940     0  55                   push rbp
   6:      0x8c6839e5941     1  4889e5               REX.W movq rbp,rsp
0x8c6839e5944     4  6a08                 push 0x8
~0x8c6839e5946     6  56                   push rsi
0x8c6839e5947     7  4881ec28000000       REX.W subq rsp,0x28
0x8c6839e594e     e  8bc0                 movl rax,rax
0x8c6839e5950    10  8bd2                 movl rdx,rdx
0x8c6839e5952    12  8b4eff               movl rcx,[rsi-0x1]
0x8c6839e5955    15  4903ce               REX.W addq rcx,r14
0x8c6839e5958    18  0fb74907             movzxwl rcx,[rcx+0x7]
0x8c6839e595c    1c  81f9bf000000         cmpl rcx,0xbf
0x8c6839e5962    22  0f8420000000         jz 0x8c6839e5988  <+0x48>
0x8c6839e5968    28  bf4a000000           movl rdi,0x4a
0x8c6839e596d    2d  4989e2               REX.W movq r10,rsp
0x8c6839e5970    30  4883ec08             REX.W subq rsp,0x8
+9(this=0x8c6839e5974    34  4883e4f0             REX.W andq rsp,0xf0
0x32a300081a25 0x8c6839e5978    38  4c891424             REX.W movq [rsp],r10
<JSGlobalProxy>0x8c6839e597c    3c  48b8d0b44953f1760000 REX.W movq rax,0x76f15349b4d0
, 0x32a30028bd81 0x8c6839e5986    46  ffd0                 call rax
0x8c6839e5988    48  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x8c6839e598c    4c  0f86a2030000         jna 0x8c6839e5d34  <+0x3f4>
<JSFunction (sfi = 0x32a3002511e5)>, 0x8c6839e5992    52  8945dc               movl [rbp-0x24],rax
0x8c6839e5995    55  8955d8               movl [rbp-0x28],rdx
0x32a30028bd9d <JSFunction (sfi = 0x32a300251215)>) {
0x8c6839e5998    58  e843faffff           call 0x8c6839e53e0  (jump table)
0x8c6839e599d    5d  c745d400000000       movl [rbp-0x2c],0x0
0x8c6839e59a4    64  c745d000000000       movl [rbp-0x30],0x0
0x8c6839e59ab    6b  8b45dc               movl rax,[rbp-0x24]
0x8c6839e59ae    6e  b9b67a0000           movl rcx,0x7ab6
0x8c6839e59b3    73  8bd0                 movl rdx,rax
0x8c6839e59b5    75  83e203               andl rdx,0x3
0x8c6839e59b8    78  85d2                 testl rdx,rdx
0x8c6839e59ba    7a  0f8586030000         jnz 0x8c6839e5d46  <+0x406>
0x8c6839e59c0    80  41baffffffff         movl r10,0xffffffff
0x8c6839e59c6    86  493bc2               REX.W cmpq rax,r10
0x8c6839e59c9    89  761d                 jna 0x8c6839e59e8  <+0xa8>
0x8c6839e59cb    8b  bf01000000           movl rdi,0x1
0x8c6839e59d0    90  4989e2               REX.W movq r10,rsp
0x8c6839e59d3    93  4883ec08             REX.W subq rsp,0x8
0x8c6839e59d7    97  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e59db    9b  4c891424             REX.W movq [rsp],r10
0x8c6839e59df    9f  488b0598ffffff       REX.W movq rax,[rip+0xffffff98]
0x8c6839e59e6    a6  ffd0                 call rax
0x8c6839e59e8    a8  488b75f0             REX.W movq rsi,[rbp-0x10]
0x8c6839e59ec    ac  488b5e1f             REX.W movq rbx,[rsi+0x1f]
0x8c6839e59f0    b0  ba03000000           movl rdx,0x3
0x8c6839e59f5    b5  48f7da               REX.W negq rdx
0x8c6839e59f8    b8  4803d3               REX.W addq rdx,rbx
0x8c6839e59fb    bb  483bc2               REX.W cmpq rax,rdx
0x8c6839e59fe    be  0f8364030000         jnc 0x8c6839e5d68  <+0x428>
0x8c6839e5a04    c4  488b5617             REX.W movq rdx,[rsi+0x17]
0x8c6839e5a08    c8  41baffffffff         movl r10,0xffffffff
0x8c6839e5a0e    ce  493bc2               REX.W cmpq rax,r10
0x8c6839e5a11    d1  761d                 jna 0x8c6839e5a30  <+0xf0>
0x8c6839e5a13    d3  bf01000000           movl rdi,0x1
0x8c6839e5a18    d8  4989e2               REX.W movq r10,rsp
0x8c6839e5a1b    db  4883ec08             REX.W subq rsp,0x8
0x8c6839e5a1f    df  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5a23    e3  4c891424             REX.W movq [rsp],r10
0x8c6839e5a27    e7  488b0550ffffff       REX.W movq rax,[rip+0xffffff50]
0x8c6839e5a2e    ee  ffd0                 call rax
0x8c6839e5a30    f0  870c02               xchgl rcx,[rdx+rax*1]
0x8c6839e5a33    f3  8b45dc               movl rax,[rbp-0x24]
0x8c6839e5a36    f6  b9a1000000           movl rcx,0xa1
0x8c6839e5a3b    fb  8bd8                 movl rbx,rax
0x8c6839e5a3d    fd  83e303               andl rbx,0x3
0x8c6839e5a40   100  85db                 testl rbx,rbx
0x8c6839e5a42   102  0f8542030000         jnz 0x8c6839e5d8a  <+0x44a>
0x8c6839e5a48   108  41baffffffff         movl r10,0xffffffff
0x8c6839e5a4e   10e  493bc2               REX.W cmpq rax,r10
0x8c6839e5a51   111  761d                 jna 0x8c6839e5a70  <+0x130>
0x8c6839e5a53   113  bf01000000           movl rdi,0x1
0x8c6839e5a58   118  4989e2               REX.W movq r10,rsp
0x8c6839e5a5b   11b  4883ec08             REX.W subq rsp,0x8
0x8c6839e5a5f   11f  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5a63   123  4c891424             REX.W movq [rsp],r10
0x8c6839e5a67   127  488b0510ffffff       REX.W movq rax,[rip+0xffffff10]
0x8c6839e5a6e   12e  ffd0                 call rax
0x8c6839e5a70   130  488b7e1f             REX.W movq rdi,[rsi+0x1f]
0x8c6839e5a74   134  bb03000000           movl rbx,0x3
0x8c6839e5a79   139  48f7db               REX.W negq rbx
0x8c6839e5a7c   13c  4803df               REX.W addq rbx,rdi
0x8c6839e5a7f   13f  483bc3               REX.W cmpq rax,rbx
0x8c6839e5a82   142  0f8324030000         jnc 0x8c6839e5dac  <+0x46c>
0x8c6839e5a88   148  41baffffffff         movl r10,0xffffffff
0x8c6839e5a8e   14e  493bc2               REX.W cmpq rax,r10
0x8c6839e5a91   151  761d                 jna 0x8c6839e5ab0  <+0x170>
0x8c6839e5a93   153  bf01000000           movl rdi,0x1
0x8c6839e5a98   158  4989e2               REX.W movq r10,rsp
0x8c6839e5a9b   15b  4883ec08             REX.W subq rsp,0x8
0x8c6839e5a9f   15f  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5aa3   163  4c891424             REX.W movq [rsp],r10
0x8c6839e5aa7   167  488b05d0feffff       REX.W movq rax,[rip+0xfffffed0]
0x8c6839e5aae   16e  ffd0                 call rax
0x8c6839e5ab0   170  870c02               xchgl rcx,[rdx+rax*1]
0x8c6839e5ab3   173  8b45dc               movl rax,[rbp-0x24]
0x8c6839e5ab6   176  b9b67a0000           movl rcx,0x7ab6
0x8c6839e5abb   17b  8bd8                 movl rbx,rax
0x8c6839e5abd   17d  83e303               andl rbx,0x3
0x8c6839e5ac0   180  85db                 testl rbx,rbx
0x8c6839e5ac2   182  0f8506030000         jnz 0x8c6839e5dce  <+0x48e>
0x8c6839e5ac8   188  41baffffffff         movl r10,0xffffffff
0x8c6839e5ace   18e  493bc2               REX.W cmpq rax,r10
0x8c6839e5ad1   191  761d                 jna 0x8c6839e5af0  <+0x1b0>
0x8c6839e5ad3   193  bf01000000           movl rdi,0x1
0x8c6839e5ad8   198  4989e2               REX.W movq r10,rsp
0x8c6839e5adb   19b  4883ec08             REX.W subq rsp,0x8
0x8c6839e5adf   19f  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5ae3   1a3  4c891424             REX.W movq [rsp],r10
0x8c6839e5ae7   1a7  488b0590feffff       REX.W movq rax,[rip+0xfffffe90]
0x8c6839e5aee   1ae  ffd0                 call rax
0x8c6839e5af0   1b0  488b7e1f             REX.W movq rdi,[rsi+0x1f]
0x8c6839e5af4   1b4  bb03000000           movl rbx,0x3
0x8c6839e5af9   1b9  48f7db               REX.W negq rbx
0x8c6839e5afc   1bc  4803df               REX.W addq rbx,rdi
0x8c6839e5aff   1bf  483bc3               REX.W cmpq rax,rbx
0x8c6839e5b02   1c2  0f83e8020000         jnc 0x8c6839e5df0  <+0x4b0>
0x8c6839e5b08   1c8  41baffffffff         movl r10,0xffffffff
0x8c6839e5b0e   1ce  493bc2               REX.W cmpq rax,r10
0x8c6839e5b11   1d1  761d                 jna 0x8c6839e5b30  <+0x1f0>
0x8c6839e5b13   1d3  bf01000000           movl rdi,0x1
0x8c6839e5b18   1d8  4989e2               REX.W movq r10,rsp
0x8c6839e5b1b   1db  4883ec08             REX.W subq rsp,0x8
0x8c6839e5b1f   1df  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5b23   1e3  4c891424             REX.W movq [rsp],r10
0x8c6839e5b27   1e7  488b0550feffff       REX.W movq rax,[rip+0xfffffe50]
0x8c6839e5b2e   1ee  ffd0                 call rax
0x8c6839e5b30   1f0  870c02               xchgl rcx,[rdx+rax*1]
0x8c6839e5b33   1f3  8b45dc               movl rax,[rbp-0x24]
0x8c6839e5b36   1f6  b9a1000000           movl rcx,0xa1
0x8c6839e5b3b   1fb  8bd8                 movl rbx,rax
0x8c6839e5b3d   1fd  83e303               andl rbx,0x3
0x8c6839e5b40   200  85db                 testl rbx,rbx
0x8c6839e5b42   202  0f85ca020000         jnz 0x8c6839e5e12  <+0x4d2>
0x8c6839e5b48   208  41baffffffff         movl r10,0xffffffff
0x8c6839e5b4e   20e  493bc2               REX.W cmpq rax,r10
0x8c6839e5b51   211  761d                 jna 0x8c6839e5b70  <+0x230>
0x8c6839e5b53   213  bf01000000           movl rdi,0x1
0x8c6839e5b58   218  4989e2               REX.W movq r10,rsp
0x8c6839e5b5b   21b  4883ec08             REX.W subq rsp,0x8
0x8c6839e5b5f   21f  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5b63   223  4c891424             REX.W movq [rsp],r10
0x8c6839e5b67   227  488b0510feffff       REX.W movq rax,[rip+0xfffffe10]
0x8c6839e5b6e   22e  ffd0                 call rax
0x8c6839e5b70   230  488b7e1f             REX.W movq rdi,[rsi+0x1f]
0x8c6839e5b74   234  bb03000000           movl rbx,0x3
0x8c6839e5b79   239  48f7db               REX.W negq rbx
0x8c6839e5b7c   23c  4803df               REX.W addq rbx,rdi
0x8c6839e5b7f   23f  483bc3               REX.W cmpq rax,rbx
0x8c6839e5b82   242  0f83ac020000         jnc 0x8c6839e5e34  <+0x4f4>
0x8c6839e5b88   248  41baffffffff         movl r10,0xffffffff
0x8c6839e5b8e   24e  493bc2               REX.W cmpq rax,r10
0x8c6839e5b91   251  761d                 jna 0x8c6839e5bb0  <+0x270>
0x8c6839e5b93   253  bf01000000           movl rdi,0x1
0x8c6839e5b98   258  4989e2               REX.W movq r10,rsp
0x8c6839e5b9b   25b  4883ec08             REX.W subq rsp,0x8
0x8c6839e5b9f   25f  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5ba3   263  4c891424             REX.W movq [rsp],r10
0x8c6839e5ba7   267  488b05d0fdffff       REX.W movq rax,[rip+0xfffffdd0]
0x8c6839e5bae   26e  ffd0                 call rax
0x8c6839e5bb0   270  870c02               xchgl rcx,[rdx+rax*1]
0x8c6839e5bb3   273  8b45dc               movl rax,[rbp-0x24]
0x8c6839e5bb6   276  b9b67a0000           movl rcx,0x7ab6
0x8c6839e5bbb   27b  8bd8                 movl rbx,rax
0x8c6839e5bbd   27d  83e303               andl rbx,0x3
0x8c6839e5bc0   280  85db                 testl rbx,rbx
0x8c6839e5bc2   282  0f858e020000         jnz 0x8c6839e5e56  <+0x516>
0x8c6839e5bc8   288  41baffffffff         movl r10,0xffffffff
0x8c6839e5bce   28e  493bc2               REX.W cmpq rax,r10
0x8c6839e5bd1   291  761d                 jna 0x8c6839e5bf0  <+0x2b0>
0x8c6839e5bd3   293  bf01000000           movl rdi,0x1
0x8c6839e5bd8   298  4989e2               REX.W movq r10,rsp
0x8c6839e5bdb   29b  4883ec08             REX.W subq rsp,0x8
0x8c6839e5bdf   29f  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5be3   2a3  4c891424             REX.W movq [rsp],r10
0x8c6839e5be7   2a7  488b0590fdffff       REX.W movq rax,[rip+0xfffffd90]
0x8c6839e5bee   2ae  ffd0                 call rax
0x8c6839e5bf0   2b0  488b7e1f             REX.W movq rdi,[rsi+0x1f]
0x8c6839e5bf4   2b4  bb03000000           movl rbx,0x3
0x8c6839e5bf9   2b9  48f7db               REX.W negq rbx
0x8c6839e5bfc   2bc  4803df               REX.W addq rbx,rdi
0x8c6839e5bff   2bf  483bc3               REX.W cmpq rax,rbx
0x8c6839e5c02   2c2  0f8370020000         jnc 0x8c6839e5e78  <+0x538>
0x8c6839e5c08   2c8  41baffffffff         movl r10,0xffffffff
0x8c6839e5c0e   2ce  493bc2               REX.W cmpq rax,r10
   6:      } -> 0x8c6839e5c11   2d1  761d                 jna 0x8c6839e5c30  <+0x2f0>
0x32a300000011 <undefined>
0x8c6839e5c13   2d3  bf01000000           movl rdi,0x1
0x8c6839e5c18   2d8  4989e2               REX.W movq r10,rsp
0x8c6839e5c1b   2db  4883ec08             REX.W subq rsp,0x8
0x8c6839e5c1f   2df  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5c23   2e3  4c891424             REX.W movq [rsp],r10
0x8c6839e5c27   2e7  488b0550fdffff       REX.W movq rax,[rip+0xfffffd50]
0x8c6839e5c2e   2ee  ffd0                 call rax
0x8c6839e5c30   2f0  870c02               xchgl rcx,[rdx+rax*1]
0x8c6839e5c33   2f3  8b45dc               movl rax,[rbp-0x24]
0x8c6839e5c36   2f6  b9a1000000           movl rcx,0xa1
0x8c6839e5c3b   2fb  8bd8                 movl rbx,rax
0x8c6839e5c3d   2fd  83e303               andl rbx,0x3
0x8c6839e5c40   300  85db                 testl rbx,rbx
0x8c6839e5c42   302  0f8552020000         jnz 0x8c6839e5e9a  <+0x55a>
0x8c6839e5c48   308  41baffffffff         movl r10,0xffffffff
   4:    } -> 0x8c6839e5c4e   30e  493bc2               REX.W cmpq rax,r10
0x32a30028bcf5 0x8c6839e5c51   311  761d                 jna 0x8c6839e5c70  <+0x330>
0x8c6839e5c53   313  bf01000000           movl rdi,0x1
0x8c6839e5c58   318  4989e2               REX.W movq r10,rsp
<Promise map = 0x32a3000899ad>
0x8c6839e5c5b   31b  4883ec08             REX.W subq rsp,0x8
0x8c6839e5c5f   31f  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5c63   323  4c891424             REX.W movq [rsp],r10
0x8c6839e5c67   327  488b0510fdffff       REX.W movq rax,[rip+0xfffffd10]
0x8c6839e5c6e   32e  ffd0                 call rax
0x8c6839e5c70   330  488b7e1f             REX.W movq rdi,[rsi+0x1f]
0x8c6839e5c74   334  bb03000000           movl rbx,0x3
0x8c6839e5c79   339  48f7db               REX.W negq rbx
0x8c6839e5c7c   33c  4803df               REX.W addq rbx,rdi
0x8c6839e5c7f   33f  483bc3               REX.W cmpq rax,rbx
0x8c6839e5c82   342  0f8334020000         jnc 0x8c6839e5ebc  <+0x57c>
0x8c6839e5c88   348  41baffffffff         movl r10,0xffffffff
0x8c6839e5c8e   34e  493bc2               REX.W cmpq rax,r10
0x8c6839e5c91   351  761d                 jna 0x8c6839e5cb0  <+0x370>
0x8c6839e5c93   353  bf01000000           movl rdi,0x1
0x8c6839e5c98   358  4989e2               REX.W movq r10,rsp
0x8c6839e5c9b   35b  4883ec08             REX.W subq rsp,0x8
0x8c6839e5c9f   35f  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5ca3   363  4c891424             REX.W movq [rsp],r10
0x8c6839e5ca7   367  488b05d0fcffff       REX.W movq rax,[rip+0xfffffcd0]
0x8c6839e5cae   36e  ffd0                 call rax
0x8c6839e5cb0   370  870c02               xchgl rcx,[rdx+rax*1]
0x8c6839e5cb3   373  8b45d4               movl rax,[rbp-0x2c]
0x8c6839e5cb6   376  83c001               addl rax,0x1
0x8c6839e5cb9   379  8b4dd8               movl rcx,[rbp-0x28]
0x8c6839e5cbc   37c  8bd8                 movl rbx,rax
0x8c6839e5cbe   37e  3bc1                 cmpl rax,rcx
0x8c6839e5cc0   380  0f831a000000         jnc 0x8c6839e5ce0  <+0x3a0>
0x8c6839e5cc6   386  4c8b565f             REX.W movq r10,[rsi+0x5f]
0x8c6839e5cca   38a  41816a182f030000     subl [r10+0x18],0x32f
0x8c6839e5cd2   392  0f8806020000         js 0x8c6839e5ede  <+0x59e>
0x8c6839e5cd8   398  895dd4               movl [rbp-0x2c],rbx
0x8c6839e5cdb   39b  e9cbfcffff           jmp 0x8c6839e59ab  <+0x6b>
0x8c6839e5ce0   3a0  8b45d0               movl rax,[rbp-0x30]
0x8c6839e5ce3   3a3  895dd4               movl [rbp-0x2c],rbx
0x8c6839e5ce6   3a6  8945cc               movl [rbp-0x34],rax
0x8c6839e5ce9   3a9  488d45cc             REX.W leaq rax,[rbp-0x34]
0x8c6839e5ced   3ad  e8fef6ffff           call 0x8c6839e53f0  (jump table)
0x8c6839e5cf2   3b2  4c8b55f0             REX.W movq r10,[rbp-0x10]
0x8c6839e5cf6   3b6  4d8b525f             REX.W movq r10,[r10+0x5f]
0x8c6839e5cfa   3ba  41816a18ee030000     subl [r10+0x18],0x3ee
0x8c6839e5d02   3c2  0f88e8010000         js 0x8c6839e5ef0  <+0x5b0>
0x8c6839e5d08   3c8  8b45cc               movl rax,[rbp-0x34]
0x8c6839e5d0b   3cb  48837df808           REX.W cmpq [rbp-0x8],0x8
0x8c6839e5d10   3d0  741d                 jz 0x8c6839e5d2f  <+0x3ef>
0x8c6839e5d12   3d2  bf30000000           movl rdi,0x30
0x8c6839e5d17   3d7  4989e2               REX.W movq r10,rsp
0x8c6839e5d1a   3da  4883ec08             REX.W subq rsp,0x8
0x8c6839e5d1e   3de  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5d22   3e2  4c891424             REX.W movq [rsp],r10
0x8c6839e5d26   3e6  488b0551fcffff       REX.W movq rax,[rip+0xfffffc51]
0x8c6839e5d2d   3ed  ffd0                 call rax
0x8c6839e5d2f   3ef  488be5               REX.W movq rsp,rbp
0x8c6839e5d32   3f2  5d                   pop rbp
0x8c6839e5d33   3f3  c3                   retl
0x8c6839e5d34   3f4  50                   push rax
0x8c6839e5d35   3f5  52                   push rdx
0x8c6839e5d36   3f6  e815f6ffff           call 0x8c6839e5350  (jump table)
0x8c6839e5d3b   3fb  5a                   pop rdx
0x8c6839e5d3c   3fc  58                   pop rax
0x8c6839e5d3d   3fd  488b75f0             REX.W movq rsi,[rbp-0x10]
0x8c6839e5d41   401  e94cfcffff           jmp 0x8c6839e5992  <+0x52>
0x8c6839e5d46   406  e855f3ffff           call 0x8c6839e50a0  (jump table)
0x8c6839e5d4b   40b  bf3c000000           movl rdi,0x3c
0x8c6839e5d50   410  4989e2               REX.W movq r10,rsp
0x8c6839e5d53   413  4883ec08             REX.W subq rsp,0x8
0x8c6839e5d57   417  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5d5b   41b  4c891424             REX.W movq [rsp],r10
0x8c6839e5d5f   41f  488b0518fcffff       REX.W movq rax,[rip+0xfffffc18]
0x8c6839e5d66   426  ffd0                 call rax
0x8c6839e5d68   428  e823f3ffff           call 0x8c6839e5090  (jump table)
0x8c6839e5d6d   42d  bf3c000000           movl rdi,0x3c
0x8c6839e5d72   432  4989e2               REX.W movq r10,rsp
0x8c6839e5d75   435  4883ec08             REX.W subq rsp,0x8
0x8c6839e5d79   439  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5d7d   43d  4c891424             REX.W movq [rsp],r10
0x8c6839e5d81   441  488b05f6fbffff       REX.W movq rax,[rip+0xfffffbf6]
0x8c6839e5d88   448  ffd0                 call rax
0x8c6839e5d8a   44a  e811f3ffff           call 0x8c6839e50a0  (jump table)
0x8c6839e5d8f   44f  bf3c000000           movl rdi,0x3c
0x8c6839e5d94   454  4989e2               REX.W movq r10,rsp
0x8c6839e5d97   457  4883ec08             REX.W subq rsp,0x8
0x8c6839e5d9b   45b  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5d9f   45f  4c891424             REX.W movq [rsp],r10
0x8c6839e5da3   463  488b05d4fbffff       REX.W movq rax,[rip+0xfffffbd4]
0x8c6839e5daa   46a  ffd0                 call rax
0x8c6839e5dac   46c  e8dff2ffff           call 0x8c6839e5090  (jump table)
0x8c6839e5db1   471  bf3c000000           movl rdi,0x3c
0x8c6839e5db6   476  4989e2               REX.W movq r10,rsp
0x8c6839e5db9   479  4883ec08             REX.W subq rsp,0x8
0x8c6839e5dbd   47d  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5dc1   481  4c891424             REX.W movq [rsp],r10
0x8c6839e5dc5   485  488b05b2fbffff       REX.W movq rax,[rip+0xfffffbb2]
0x8c6839e5dcc   48c  ffd0                 call rax
0x8c6839e5dce   48e  e8cdf2ffff           call 0x8c6839e50a0  (jump table)
0x8c6839e5dd3   493  bf3c000000           movl rdi,0x3c
0x8c6839e5dd8   498  4989e2               REX.W movq r10,rsp
0x8c6839e5ddb   49b  4883ec08             REX.W subq rsp,0x8
0x8c6839e5ddf   49f  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5de3   4a3  4c891424             REX.W movq [rsp],r10
0x8c6839e5de7   4a7  488b0590fbffff       REX.W movq rax,[rip+0xfffffb90]
0x8c6839e5dee   4ae  ffd0                 call rax
0x8c6839e5df0   4b0  e89bf2ffff           call 0x8c6839e5090  (jump table)
0x8c6839e5df5   4b5  bf3c000000           movl rdi,0x3c
0x8c6839e5dfa   4ba  4989e2               REX.W movq r10,rsp
0x8c6839e5dfd   4bd  4883ec08             REX.W subq rsp,0x8
0x8c6839e5e01   4c1  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5e05   4c5  4c891424             REX.W movq [rsp],r10
0x8c6839e5e09   4c9  488b056efbffff       REX.W movq rax,[rip+0xfffffb6e]
0x8c6839e5e10   4d0  ffd0                 call rax
0x8c6839e5e12   4d2  e889f2ffff           call 0x8c6839e50a0  (jump table)
0x8c6839e5e17   4d7  bf3c000000           movl rdi,0x3c
0x8c6839e5e1c   4dc  4989e2               REX.W movq r10,rsp
0x8c6839e5e1f   4df  4883ec08             REX.W subq rsp,0x8
0x8c6839e5e23   4e3  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5e27   4e7  4c891424             REX.W movq [rsp],r10
0x8c6839e5e2b   4eb  488b054cfbffff       REX.W movq rax,[rip+0xfffffb4c]
0x8c6839e5e32   4f2  ffd0                 call rax
0x8c6839e5e34   4f4  e857f2ffff           call 0x8c6839e5090  (jump table)
0x8c6839e5e39   4f9  bf3c000000           movl rdi,0x3c
0x8c6839e5e3e   4fe  4989e2               REX.W movq r10,rsp
0x8c6839e5e41   501  4883ec08             REX.W subq rsp,0x8
0x8c6839e5e45   505  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5e49   509  4c891424             REX.W movq [rsp],r10
0x8c6839e5e4d   50d  488b052afbffff       REX.W movq rax,[rip+0xfffffb2a]
0x8c6839e5e54   514  ffd0                 call rax
0x8c6839e5e56   516  e845f2ffff           call 0x8c6839e50a0  (jump table)
0x8c6839e5e5b   51b  bf3c000000           movl rdi,0x3c
0x8c6839e5e60   520  4989e2               REX.W movq r10,rsp
0x8c6839e5e63   523  4883ec08             REX.W subq rsp,0x8
0x8c6839e5e67   527  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5e6b   52b  4c891424             REX.W movq [rsp],r10
0x8c6839e5e6f   52f  488b0508fbffff       REX.W movq rax,[rip+0xfffffb08]
0x8c6839e5e76   536  ffd0                 call rax
0x8c6839e5e78   538  e813f2ffff           call 0x8c6839e5090  (jump table)
0x8c6839e5e7d   53d  bf3c000000           movl rdi,0x3c
0x8c6839e5e82   542  4989e2               REX.W movq r10,rsp
0x8c6839e5e85   545  4883ec08             REX.W subq rsp,0x8
0x8c6839e5e89   549  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5e8d   54d  4c891424             REX.W movq [rsp],r10
0x8c6839e5e91   551  488b05e6faffff       REX.W movq rax,[rip+0xfffffae6]
0x8c6839e5e98   558  ffd0                 call rax
0x8c6839e5e9a   55a  e801f2ffff           call 0x8c6839e50a0  (jump table)
0x8c6839e5e9f   55f  bf3c000000           movl rdi,0x3c
0x8c6839e5ea4   564  4989e2               REX.W movq r10,rsp
0x8c6839e5ea7   567  4883ec08             REX.W subq rsp,0x8
0x8c6839e5eab   56b  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5eaf   56f  4c891424             REX.W movq [rsp],r10
0x8c6839e5eb3   573  488b05c4faffff       REX.W movq rax,[rip+0xfffffac4]
0x8c6839e5eba   57a  ffd0                 call rax
   1: } -> 0x8c6839e5ebc   57c  e8cff1ffff           call 0x8c6839e5090  (jump table)
0x32a30028c169 0x8c6839e5ec1   581  bf3c000000           movl rdi,0x3c
0x8c6839e5ec6   586  4989e2               REX.W movq r10,rsp
0x8c6839e5ec9   589  4883ec08             REX.W subq rsp,0x8
0x8c6839e5ecd   58d  4883e4f0             REX.W andq rsp,0xf0
<Promise map = 0x32a3000899ad>0x8c6839e5ed1   591  4c891424             REX.W movq [rsp],r10

0x8c6839e5ed5   595  488b05a2faffff       REX.W movq rax,[rip+0xfffffaa2]
0x8c6839e5edc   59c  ffd0                 call rax
0x8c6839e5ede   59e  52                   push rdx
0x8c6839e5edf   59f  53                   push rbx
0x8c6839e5ee0   5a0  e8bbf2ffff           call 0x8c6839e51a0  (jump table)
0x8c6839e5ee5   5a5  5b                   pop rbx
0x8c6839e5ee6   5a6  5a                   pop rdx
0x8c6839e5ee7   5a7  488b75f0             REX.W movq rsi,[rbp-0x10]
0x8c6839e5eeb   5ab  e9e8fdffff           jmp 0x8c6839e5cd8  <+0x398>
0x8c6839e5ef0   5b0  e8abf2ffff           call 0x8c6839e51a0  (jump table)
0x8c6839e5ef5   5b5  e90efeffff           jmp 0x8c6839e5d08  <+0x3c8>
0x8c6839e5efa   5ba  6690                 nop

Source positions:
 pc offset  position
        58         3
       3ad        83
       3f6         0  statement
       406        15  statement
       428        15  statement
       44a        24  statement
       46c        24  statement
       48e        34  statement
       4b0        34  statement
       4d2        43  statement
       4f4        43  statement
       516        53  statement
       538        53  statement
       55a        62  statement
       57c        62  statement
       5a0        78  statement
       5b0        83  statement

Safepoints (stack slots = 11, entries = 1, byte size = 15)
0x8c6839e599d     5d  slots (sp->fp): 00000000000

RelocInfo (size = 0)

--- End code ---
   1: ~wasm-function[6] {
local decls count: 1
  +415  skip                : 3 bytes
wasm-decode 0x60485db430ef...0x60485db43143 (module+418, 84 bytes)
  @3        #i32.const                     | B1 |  i
  @5        #local.set                     | B1 | 
  @7        #loop                          | B1L0 | 
  @9        #local.get                     | B1L0 |  i
  @11       #i32.const                     | B1L0 |  i i
  @15       #i32.atomic.store              | B1L0 | 
  @19       #local.get                     | B1L0 |  i
  @21       #i32.const                     | B1L0 |  i i
  @24       #i32.atomic.store              | B1L0 | 
  @28       #local.get                     | B1L0 |  i
  @30       #i32.const                     | B1L0 |  i i
  @34       #i32.atomic.store              | B1L0 | 
  @38       #local.get                     | B1L0 |  i
  @40       #i32.const                     | B1L0 |  i i
  @43       #i32.atomic.store              | B1L0 | 
  @47       #local.get                     | B1L0 |  i
  @49       #i32.const                     | B1L0 |  i i
  @53       #i32.atomic.store              | B1L0 | 
  @57       #local.get                     | B1L0 |  i
  @59       #i32.const                     | B1L0 |  i i
  @62       #i32.atomic.store              | B1L0 | 
  @66       #local.get                     | B1L0 |  i
  @68       #i32.const                     | B1L0 |  i i
  @70       #i32.add                       | B1L0 |  i
  @71       #local.set                     | B1L0 | 
  @73       #local.get                     | B1L0 |  i
  @75       #local.get                     | B1L0 |  i i
  @77       #i32.lt_u                      | B1L0 |  i
  @78       #br_if                         | B1L0 | 
  @80       #end                           | B1 | 
  @81       #local.get                     | B1 |  i
  @83       #end                           |
  @83       #(implicit) return             |  | 
wasm-decode ok

--- WebAssembly code ---
name: wasm-function[6]
index: 6
kind: wasm function
compiler: TurboFan
Body (size = 1024 = 1004 + 20 padding)
Instructions (size = 988)
0x8c6839e5f40     0  55                   push rbp
0x8c6839e5f41     1  4889e5               REX.W movq rbp,rsp
0x8c6839e5f44     4  6a08                 push 0x8
0x8c6839e5f46     6  56                   push rsi
0x8c6839e5f47     7  4883ec40             REX.W subq rsp,0x40
0x8c6839e5f4b     b  488b4e17             REX.W movq rcx,[rsi+0x17]
0x8c6839e5f4f     f  8b7eff               movl rdi,[rsi-0x1]
0x8c6839e5f52    12  41baffffffff         movl r10,0xffffffff
0x8c6839e5f58    18  493bfa               REX.W cmpq rdi,r10
0x8c6839e5f5b    1b  7620                 jna 0x8c6839e5f7d  <+0x3d>
0x8c6839e5f5d    1d  bf01000000           movl rdi,0x1
0x8c6839e5f62    22  4989e2               REX.W movq r10,rsp
0x8c6839e5f65    25  4883ec08             REX.W subq rsp,0x8
0x8c6839e5f69    29  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5f6d    2d  4c891424             REX.W movq [rsp],r10
0x8c6839e5f71    31  48b8d0b44953f1760000 REX.W movq rax,0x76f15349b4d0
0x8c6839e5f7b    3b  ffd0                 call rax
0x8c6839e5f7d    3d  410fb77c3e07         movzxwl rdi,[r14+rdi*1+0x7]
0x8c6839e5f83    43  41baffffffff         movl r10,0xffffffff
0x8c6839e5f89    49  493bfa               REX.W cmpq rdi,r10
0x8c6839e5f8c    4c  761d                 jna 0x8c6839e5fab  <+0x6b>
0x8c6839e5f8e    4e  bf01000000           movl rdi,0x1
0x8c6839e5f93    53  4989e2               REX.W movq r10,rsp
0x8c6839e5f96    56  4883ec08             REX.W subq rsp,0x8
0x8c6839e5f9a    5a  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e5f9e    5e  4c891424             REX.W movq [rsp],r10
0x8c6839e5fa2    62  488b05caffffff       REX.W movq rax,[rip+0xffffffca]
0x8c6839e5fa9    69  ffd0                 call rax
0x8c6839e5fab    6b  488945b0             REX.W movq [rbp-0x50],rax
0x8c6839e5faf    6f  488955d0             REX.W movq [rbp-0x30],rdx
0x8c6839e5fb3    73  48894dc0             REX.W movq [rbp-0x40],rcx
0x8c6839e5fb7    77  660f1f840000000000   nop
0x8c6839e5fc0    80  81ffbf000000         cmpl rdi,0xbf
0x8c6839e5fc6    86  0f85c4020000         jnz 0x8c6839e6290  <+0x350>
0x8c6839e5fcc    8c  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x8c6839e5fd0    90  0f86ef020000         jna 0x8c6839e62c5  <+0x385>
0x8c6839e5fd6    96  498bbd70b30000       REX.W movq rdi,[r13+0xb370]
0x8c6839e5fdd    9d  33c0                 xorl rax,rax
0x8c6839e5fdf    9f  33f6                 xorl rsi,rsi
0x8c6839e5fe1    a1  48bb0054f754f1760000 REX.W movq rbx,0x76f154f75400
0x8c6839e5feb    ab  4c8bc0               REX.W movq r8,rax
0x8c6839e5fee    ae  49ba0000000cf1760000 REX.W movq r10,0x76f10c000000
0x8c6839e5ff8    b8  8b7f03               movl rdi,[rdi+0x3]
0x8c6839e5ffb    bb  c1ef09               shrl rdi, 9
0x8c6839e5ffe    be  c1e704               shll rdi, 4
0x8c6839e6001    c1  498b3c3a             REX.W movq rdi,[r10+rdi*1]
0x8c6839e6005    c5  ffd7                 call rdi
0x8c6839e6007    c7  33d2                 xorl rdx,rdx
0x8c6839e6009    c9  488b4dc0             REX.W movq rcx,[rbp-0x40]
0x8c6839e600d    cd  660f1f840000000000   nop
0x8c6839e6016    d6  660f1f840000000000   nop
0x8c6839e601f    df  660f1f840000000000   nop
0x8c6839e6028    e8  660f1f840000000000   nop
0x8c6839e6031    f1  660f1f840000000000   nop
0x8c6839e603a    fa  660f1f440000         nop
0x8c6839e6040   100  8b7db0               movl rdi,[rbp-0x50]
0x8c6839e6043   103  41baffffffff         movl r10,0xffffffff
0x8c6839e6049   109  493bfa               REX.W cmpq rdi,r10
0x8c6839e604c   10c  761d                 jna 0x8c6839e606b  <+0x12b>
0x8c6839e604e   10e  bf01000000           movl rdi,0x1
0x8c6839e6053   113  4989e2               REX.W movq r10,rsp
0x8c6839e6056   116  4883ec08             REX.W subq rsp,0x8
0x8c6839e605a   11a  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e605e   11e  4c891424             REX.W movq [rsp],r10
0x8c6839e6062   122  488b050affffff       REX.W movq rax,[rip+0xffffff0a]
0x8c6839e6069   129  ffd0                 call rax
0x8c6839e606b   12b  4c8d040f             REX.W leaq r8,[rdi+rcx*1]
0x8c6839e606f   12f  4183e003             andl r8,0x3
0x8c6839e6073   133  458bc0               movl r8,r8
0x8c6839e6076   136  41baffffffff         movl r10,0xffffffff
0x8c6839e607c   13c  4d3bc2               REX.W cmpq r8,r10
0x8c6839e607f   13f  761d                 jna 0x8c6839e609e  <+0x15e>
0x8c6839e6081   141  bf01000000           movl rdi,0x1
0x8c6839e6086   146  4989e2               REX.W movq r10,rsp
0x8c6839e6089   149  4883ec08             REX.W subq rsp,0x8
0x8c6839e608d   14d  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e6091   151  4c891424             REX.W movq [rsp],r10
0x8c6839e6095   155  488b05d7feffff       REX.W movq rax,[rip+0xfffffed7]
0x8c6839e609c   15c  ffd0                 call rax
0x8c6839e609e   15e  4585c0               testl r8,r8
0x8c6839e60a1   161  0f8551020000         jnz 0x8c6839e62f8  <+0x3b8>
0x8c6839e60a7   167  41b8b67a0000         movl r8,0x7ab6
0x8c6839e60ad   16d  4d8bd0               REX.W movq r10,r8
0x8c6839e60b0   170  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e60b4   174  41b9a1000000         movl r9,0xa1
0x8c6839e60ba   17a  4d8bd1               REX.W movq r10,r9
0x8c6839e60bd   17d  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e60c1   181  4d8bd0               REX.W movq r10,r8
0x8c6839e60c4   184  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e60c8   188  4d8bd1               REX.W movq r10,r9
0x8c6839e60cb   18b  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e60cf   18f  4d8bd0               REX.W movq r10,r8
0x8c6839e60d2   192  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e60d6   196  4d8bd1               REX.W movq r10,r9
0x8c6839e60d9   199  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e60dd   19d  83c201               addl rdx,0x1
0x8c6839e60e0   1a0  41baffffffff         movl r10,0xffffffff
0x8c6839e60e6   1a6  493bd2               REX.W cmpq rdx,r10
0x8c6839e60e9   1a9  761d                 jna 0x8c6839e6108  <+0x1c8>
0x8c6839e60eb   1ab  bf01000000           movl rdi,0x1
0x8c6839e60f0   1b0  4989e2               REX.W movq r10,rsp
0x8c6839e60f3   1b3  4883ec08             REX.W subq rsp,0x8
0x8c6839e60f7   1b7  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e60fb   1bb  4c891424             REX.W movq [rsp],r10
0x8c6839e60ff   1bf  488b056dfeffff       REX.W movq rax,[rip+0xfffffe6d]
0x8c6839e6106   1c6  ffd0                 call rax
0x8c6839e6108   1c8  3b55d0               cmpl rdx,[rbp-0x30]
0x8c6839e610b   1cb  0f83cb000000         jnc 0x8c6839e61dc  <+0x29c>
0x8c6839e6111   1d1  4d8bd0               REX.W movq r10,r8
0x8c6839e6114   1d4  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e6118   1d8  4d8bd1               REX.W movq r10,r9
0x8c6839e611b   1db  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e611f   1df  4d8bd0               REX.W movq r10,r8
0x8c6839e6122   1e2  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e6126   1e6  4d8bd1               REX.W movq r10,r9
0x8c6839e6129   1e9  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e612d   1ed  4d8bd0               REX.W movq r10,r8
0x8c6839e6130   1f0  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e6134   1f4  4d8bd1               REX.W movq r10,r9
0x8c6839e6137   1f7  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e613b   1fb  83c201               addl rdx,0x1
0x8c6839e613e   1fe  41baffffffff         movl r10,0xffffffff
0x8c6839e6144   204  493bd2               REX.W cmpq rdx,r10
0x8c6839e6147   207  761d                 jna 0x8c6839e6166  <+0x226>
0x8c6839e6149   209  bf01000000           movl rdi,0x1
0x8c6839e614e   20e  4989e2               REX.W movq r10,rsp
0x8c6839e6151   211  4883ec08             REX.W subq rsp,0x8
0x8c6839e6155   215  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e6159   219  4c891424             REX.W movq [rsp],r10
0x8c6839e615d   21d  488b050ffeffff       REX.W movq rax,[rip+0xfffffe0f]
0x8c6839e6164   224  ffd0                 call rax
0x8c6839e6166   226  3b55d0               cmpl rdx,[rbp-0x30]
0x8c6839e6169   229  0f83ad000000         jnc 0x8c6839e621c  <+0x2dc>
0x8c6839e616f   22f  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x8c6839e6173   233  0f8656010000         jna 0x8c6839e62cf  <+0x38f>
0x8c6839e6179   239  4d8bd0               REX.W movq r10,r8
0x8c6839e617c   23c  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e6180   240  4d8bd1               REX.W movq r10,r9
0x8c6839e6183   243  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e6187   247  4d8bd0               REX.W movq r10,r8
0x8c6839e618a   24a  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e618e   24e  4d8bd1               REX.W movq r10,r9
0x8c6839e6191   251  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e6195   255  4d8bd0               REX.W movq r10,r8
0x8c6839e6198   258  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e619c   25c  4d8bd1               REX.W movq r10,r9
0x8c6839e619f   25f  44871439             xchgl r10,[rcx+rdi*1]
0x8c6839e61a3   263  83c201               addl rdx,0x1
0x8c6839e61a6   266  41baffffffff         movl r10,0xffffffff
0x8c6839e61ac   26c  493bd2               REX.W cmpq rdx,r10
0x8c6839e61af   26f  761d                 jna 0x8c6839e61ce  <+0x28e>
0x8c6839e61b1   271  bf01000000           movl rdi,0x1
0x8c6839e61b6   276  4989e2               REX.W movq r10,rsp
0x8c6839e61b9   279  4883ec08             REX.W subq rsp,0x8
0x8c6839e61bd   27d  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e61c1   281  4c891424             REX.W movq [rsp],r10
0x8c6839e61c5   285  488b05a7fdffff       REX.W movq rax,[rip+0xfffffda7]
0x8c6839e61cc   28c  ffd0                 call rax
0x8c6839e61ce   28e  3b55d0               cmpl rdx,[rbp-0x30]
0x8c6839e61d1   291  0f8269feffff         jc 0x8c6839e6040  <+0x100>
0x8c6839e61d7   297  e97a000000           jmp 0x8c6839e6256  <+0x316>
0x8c6839e61dc   29c  488d55d8             REX.W leaq rdx,[rbp-0x28]
0x8c6839e61e0   2a0  c70200000000         movl [rdx],0x0
0x8c6839e61e6   2a6  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x8c6839e61ed   2ad  52                   push rdx
0x8c6839e61ee   2ae  b801000000           movl rax,0x1
0x8c6839e61f3   2b3  48bb905bf754f1760000 REX.W movq rbx,0x76f154f75b90
0x8c6839e61fd   2bd  33f6                 xorl rsi,rsi
0x8c6839e61ff   2bf  4c8b15eafdffff       REX.W movq r10,[rip+0xfffffdea]
0x8c6839e6206   2c6  8b4903               movl rcx,[rcx+0x3]
0x8c6839e6209   2c9  c1e909               shrl rcx, 9
0x8c6839e620c   2cc  c1e104               shll rcx, 4
0x8c6839e620f   2cf  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x8c6839e6213   2d3  ffd1                 call rcx
0x8c6839e6215   2d5  33c0                 xorl rax,rax
0x8c6839e6217   2d7  488be5               REX.W movq rsp,rbp
0x8c6839e621a   2da  5d                   pop rbp
0x8c6839e621b   2db  c3                   retl
0x8c6839e621c   2dc  488d55e0             REX.W leaq rdx,[rbp-0x20]
0x8c6839e6220   2e0  c70200000000         movl [rdx],0x0
0x8c6839e6226   2e6  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x8c6839e622d   2ed  52                   push rdx
0x8c6839e622e   2ee  488b1dc0ffffff       REX.W movq rbx,[rip+0xffffffc0]
0x8c6839e6235   2f5  b801000000           movl rax,0x1
0x8c6839e623a   2fa  33f6                 xorl rsi,rsi
0x8c6839e623c   2fc  4c8b15adfdffff       REX.W movq r10,[rip+0xfffffdad]
0x8c6839e6243   303  8b4903               movl rcx,[rcx+0x3]
0x8c6839e6246   306  c1e909               shrl rcx, 9
0x8c6839e6249   309  c1e104               shll rcx, 4
0x8c6839e624c   30c  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x8c6839e6250   310  ffd1                 call rcx
0x8c6839e6252   312  33c0                 xorl rax,rax
0x8c6839e6254   314  ebc1                 jmp 0x8c6839e6217  <+0x2d7>
0x8c6839e6256   316  488d55e8             REX.W leaq rdx,[rbp-0x18]
0x8c6839e625a   31a  c70200000000         movl [rdx],0x0
0x8c6839e6260   320  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x8c6839e6267   327  52                   push rdx
0x8c6839e6268   328  488b1d86ffffff       REX.W movq rbx,[rip+0xffffff86]
0x8c6839e626f   32f  b801000000           movl rax,0x1
0x8c6839e6274   334  33f6                 xorl rsi,rsi
0x8c6839e6276   336  4c8b1573fdffff       REX.W movq r10,[rip+0xfffffd73]
0x8c6839e627d   33d  8b4903               movl rcx,[rcx+0x3]
0x8c6839e6280   340  c1e909               shrl rcx, 9
0x8c6839e6283   343  c1e104               shll rcx, 4
0x8c6839e6286   346  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x8c6839e628a   34a  ffd1                 call rcx
0x8c6839e628c   34c  33c0                 xorl rax,rax
0x8c6839e628e   34e  eb87                 jmp 0x8c6839e6217  <+0x2d7>
0x8c6839e6290   350  498b9570b30000       REX.W movq rdx,[r13+0xb370]
0x8c6839e6297   357  b994000000           movl rcx,0x94
0x8c6839e629c   35c  51                   push rcx
0x8c6839e629d   35d  48bb20066e54f1760000 REX.W movq rbx,0x76f1546e0620
0x8c6839e62a7   367  b801000000           movl rax,0x1
0x8c6839e62ac   36c  33f6                 xorl rsi,rsi
0x8c6839e62ae   36e  4c8b153bfdffff       REX.W movq r10,[rip+0xfffffd3b]
0x8c6839e62b5   375  8b5203               movl rdx,[rdx+0x3]
0x8c6839e62b8   378  c1ea09               shrl rdx, 9
0x8c6839e62bb   37b  c1e204               shll rdx, 4
0x8c6839e62be   37e  498b1412             REX.W movq rdx,[r10+rdx*1]
0x8c6839e62c2   382  ffd2                 call rdx
0x8c6839e62c4   384  cc                   int3l
0x8c6839e62c5   385  e886f0ffff           call 0x8c6839e5350  (jump table)
0x8c6839e62ca   38a  e907fdffff           jmp 0x8c6839e5fd6  <+0x96>
0x8c6839e62cf   38f  488955c8             REX.W movq [rbp-0x38],rdx
0x8c6839e62d3   393  48897db8             REX.W movq [rbp-0x48],rdi
0x8c6839e62d7   397  e874f0ffff           call 0x8c6839e5350  (jump table)
0x8c6839e62dc   39c  8b55c8               movl rdx,[rbp-0x38]
0x8c6839e62df   39f  41b9a1000000         movl r9,0xa1
0x8c6839e62e5   3a5  488b4dc0             REX.W movq rcx,[rbp-0x40]
0x8c6839e62e9   3a9  488b7db8             REX.W movq rdi,[rbp-0x48]
0x8c6839e62ed   3ad  41b8b67a0000         movl r8,0x7ab6
0x8c6839e62f3   3b3  e981feffff           jmp 0x8c6839e6179  <+0x239>
0x8c6839e62f8   3b8  e8a3edffff           call 0x8c6839e50a0  (jump table)
0x8c6839e62fd   3bd  bf3c000000           movl rdi,0x3c
0x8c6839e6302   3c2  4989e2               REX.W movq r10,rsp
0x8c6839e6305   3c5  4883ec08             REX.W subq rsp,0x8
0x8c6839e6309   3c9  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e630d   3cd  4c891424             REX.W movq [rsp],r10
0x8c6839e6311   3d1  488b055bfcffff       REX.W movq rax,[rip+0xfffffc5b]
0x8c6839e6318   3d8  ffd0                 call rax
0x8c6839e631a   3da  90                   nop
0x8c6839e631b   3db  90                   nop

Protected instructions:
 pc offset
       170         
       17d         
       184         
       18b         
       192         
       199         
       1d4         
       1db         
       1e2         
       1e9         
       1f0         
       1f7         
       23c         
       243         
       24a         
       251         
       258         
       25f         

Source positions:
 pc offset  position
        9d         3
       167        15
       174        24
       181        34
       188        43
       18f        53
       196        62
       1d1        15
       1d8        24
       1df        34
       1e6        43
       1ed        53
       1f4        62
       239        15
       240        24
       247        34
       24e        43
       255        53
       25c        62
       2ad        83
       357         0
       38f         7
       3b8        15

Safepoints (stack slots = 12, entries = 1, byte size = 15)
0x8c6839e6007     c7  slots (sp->fp): 000000000000

RelocInfo (size = 19)
0x8c6839e5f73  external reference (0x76f15349b4d0)
0x8c6839e5fe3  external reference (0x76f154f75400)
0x8c6839e5ff0  external reference (0x76f10c000000)
0x8c6839e61f5  external reference (0x76f154f75b90)
0x8c6839e629f  external reference (0x76f1546e0620)
0x8c6839e62c6  wasm stub call  (0x8c6839e5350)
0x8c6839e62d8  wasm stub call  (0x8c6839e5350)
0x8c6839e62f9  wasm stub call  (0x8c6839e50a0)

--- End code ---
   1: ~+0(this=0x32a300841a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x32a300841a25 <JSGlobalProxy>) {
   2:  } -> 0x32a300000011 <undefined>
   1: } -> 0x32a300000011 <undefined>
   1: ~onmessage+0(this=0x32a300841a25 <JSGlobalProxy>, 0x32a300489011 <Object map = 0x32a300859b19>) {
   1: *wasm-function[6] {
   1: ~+0(this=0x32a3009c1a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x32a3009c1a25 <JSGlobalProxy>) {
   2:  } -> 0x32a300000011 <undefined>
   1: } -> 0x32a300000011 <undefined>
   1: ~onmessage+0(this=0x32a3009c1a25 <JSGlobalProxy>, 0x32a3005c9011 <Object map = 0x32a3009d9b19>) {
   1: *wasm-function[6] {
   1: ~+0(this=0x32a300a01a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x32a300a01a25 <JSGlobalProxy>) {
   2:  } -> 0x32a300000011 <undefined>
   1: } -> 0x32a300000011 <undefined>
   1: ~onmessage+0(this=0x32a300a01a25 <JSGlobalProxy>, 0x32a300709011 <Object map = 0x32a300a19b19>) {
   1: *wasm-function[6] {
   1: ~+0(this=0x32a300a41a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x32a300a41a25 <JSGlobalProxy>) {
   2:  } -> 0x32a300000011 <undefined>
   1: } -> 0x32a300000011 <undefined>
   1: ~onmessage+0(this=0x32a300a41a25 <JSGlobalProxy>, 0x32a300889011 <Object map = 0x32a300a59b19>) {
   1: *wasm-function[6] {
   1: } -> 0
local decls count: 0
  +340  skip                : 1 bytes
wasm-decode 0x60485db430a4...0x60485db430ac (module+341, 8 bytes)
[]; [i32:s0x24]
  @1        #local.get                     | B1 |  i
[]; [i32:s0x24, i32:rax]
[DEBUG]AtomicOp called
  @3        #i32.atomic.load               | B1 |  i
[]; [i32:s0x24, i32:rdx]
  @7        #end                           |
  @7        #(implicit) return             |  | 
wasm-decode ok

--- WebAssembly code ---
name: wasm-function[3]
index: 3
kind: wasm function
compiler: Liftoff
Body (size = 448 = 408 + 40 padding)
Instructions (size = 392)
0x8c6839e6340     0  55                   push rbp
0x8c6839e6341     1  4889e5               REX.W movq rbp,rsp
0x8c6839e6344     4  6a08                 push 0x8
0x8c6839e6346     6  56                   push rsi
0x8c6839e6347     7  4881ec18000000       REX.W subq rsp,0x18
0x8c6839e634e     e  8bc0                 movl rax,rax
0x8c6839e6350    10  8b4eff               movl rcx,[rsi-0x1]
0x8c6839e6353    13  4903ce               REX.W addq rcx,r14
0x8c6839e6356    16  0fb74907             movzxwl rcx,[rcx+0x7]
0x8c6839e635a    1a  81f9bf000000         cmpl rcx,0xbf
0x8c6839e6360    20  0f8420000000         jz 0x8c6839e6386  <+0x46>
0x8c6839e6366    26  bf4a000000           movl rdi,0x4a
0x8c6839e636b    2b  4989e2               REX.W movq r10,rsp
0x8c6839e636e    2e  4883ec08             REX.W subq rsp,0x8
0x8c6839e6372    32  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e6376    36  4c891424             REX.W movq [rsp],r10
0x8c6839e637a    3a  48b8d0b44953f1760000 REX.W movq rax,0x76f15349b4d0
0x8c6839e6384    44  ffd0                 call rax
0x8c6839e6386    46  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x8c6839e638a    4a  0f86d9000000         jna 0x8c6839e6469  <+0x129>
0x8c6839e6390    50  8945dc               movl [rbp-0x24],rax
0x8c6839e6393    53  e848f0ffff           call 0x8c6839e53e0  (jump table)
0x8c6839e6398    58  8b45dc               movl rax,[rbp-0x24]
0x8c6839e639b    5b  8bc8                 movl rcx,rax
0x8c6839e639d    5d  83e103               andl rcx,0x3
0x8c6839e63a0    60  85c9                 testl rcx,rcx
0x8c6839e63a2    62  0f85d1000000         jnz 0x8c6839e6479  <+0x139>
0x8c6839e63a8    68  41baffffffff         movl r10,0xffffffff
0x8c6839e63ae    6e  493bc2               REX.W cmpq rax,r10
0x8c6839e63b1    71  761d                 jna 0x8c6839e63d0  <+0x90>
0x8c6839e63b3    73  bf01000000           movl rdi,0x1
0x8c6839e63b8    78  4989e2               REX.W movq r10,rsp
0x8c6839e63bb    7b  4883ec08             REX.W subq rsp,0x8
0x8c6839e63bf    7f  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e63c3    83  4c891424             REX.W movq [rsp],r10
0x8c6839e63c7    87  488b05aeffffff       REX.W movq rax,[rip+0xffffffae]
0x8c6839e63ce    8e  ffd0                 call rax
0x8c6839e63d0    90  488b75f0             REX.W movq rsi,[rbp-0x10]
0x8c6839e63d4    94  488b561f             REX.W movq rdx,[rsi+0x1f]
0x8c6839e63d8    98  b903000000           movl rcx,0x3
0x8c6839e63dd    9d  48f7d9               REX.W negq rcx
0x8c6839e63e0    a0  4803ca               REX.W addq rcx,rdx
0x8c6839e63e3    a3  483bc1               REX.W cmpq rax,rcx
0x8c6839e63e6    a6  0f83af000000         jnc 0x8c6839e649b  <+0x15b>
0x8c6839e63ec    ac  488b4e17             REX.W movq rcx,[rsi+0x17]
0x8c6839e63f0    b0  41baffffffff         movl r10,0xffffffff
0x8c6839e63f6    b6  493bc2               REX.W cmpq rax,r10
0x8c6839e63f9    b9  761d                 jna 0x8c6839e6418  <+0xd8>
0x8c6839e63fb    bb  bf01000000           movl rdi,0x1
0x8c6839e6400    c0  4989e2               REX.W movq r10,rsp
0x8c6839e6403    c3  4883ec08             REX.W subq rsp,0x8
0x8c6839e6407    c7  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e640b    cb  4c891424             REX.W movq [rsp],r10
0x8c6839e640f    cf  488b0566ffffff       REX.W movq rax,[rip+0xffffff66]
0x8c6839e6416    d6  ffd0                 call rax
0x8c6839e6418    d8  8b1401               movl rdx,[rcx+rax*1]
0x8c6839e641b    db  8955d8               movl [rbp-0x28],rdx
0x8c6839e641e    de  488d45d8             REX.W leaq rax,[rbp-0x28]
0x8c6839e6422    e2  e8c9efffff           call 0x8c6839e53f0  (jump table)
0x8c6839e6427    e7  4c8b55f0             REX.W movq r10,[rbp-0x10]
0x8c6839e642b    eb  4d8b525f             REX.W movq r10,[r10+0x5f]
0x8c6839e642f    ef  41816a0c23010000     subl [r10+0xc],0x123
0x8c6839e6437    f7  0f8880000000         js 0x8c6839e64bd  <+0x17d>
0x8c6839e643d    fd  8b45d8               movl rax,[rbp-0x28]
0x8c6839e6440   100  48837df808           REX.W cmpq [rbp-0x8],0x8
0x8c6839e6445   105  741d                 jz 0x8c6839e6464  <+0x124>
0x8c6839e6447   107  bf30000000           movl rdi,0x30
0x8c6839e644c   10c  4989e2               REX.W movq r10,rsp
0x8c6839e644f   10f  4883ec08             REX.W subq rsp,0x8
0x8c6839e6453   113  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e6457   117  4c891424             REX.W movq [rsp],r10
0x8c6839e645b   11b  488b051affffff       REX.W movq rax,[rip+0xffffff1a]
0x8c6839e6462   122  ffd0                 call rax
0x8c6839e6464   124  488be5               REX.W movq rsp,rbp
0x8c6839e6467   127  5d                   pop rbp
0x8c6839e6468   128  c3                   retl
0x8c6839e6469   129  50                   push rax
0x8c6839e646a   12a  e8e1eeffff           call 0x8c6839e5350  (jump table)
0x8c6839e646f   12f  58                   pop rax
0x8c6839e6470   130  488b75f0             REX.W movq rsi,[rbp-0x10]
0x8c6839e6474   134  e917ffffff           jmp 0x8c6839e6390  <+0x50>
0x8c6839e6479   139  e822ecffff           call 0x8c6839e50a0  (jump table)
0x8c6839e647e   13e  bf3c000000           movl rdi,0x3c
0x8c6839e6483   143  4989e2               REX.W movq r10,rsp
0x8c6839e6486   146  4883ec08             REX.W subq rsp,0x8
0x8c6839e648a   14a  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e648e   14e  4c891424             REX.W movq [rsp],r10
0x8c6839e6492   152  488b05e3feffff       REX.W movq rax,[rip+0xfffffee3]
0x8c6839e6499   159  ffd0                 call rax
0x8c6839e649b   15b  e8f0ebffff           call 0x8c6839e5090  (jump table)
0x8c6839e64a0   160  bf3c000000           movl rdi,0x3c
0x8c6839e64a5   165  4989e2               REX.W movq r10,rsp
0x8c6839e64a8   168  4883ec08             REX.W subq rsp,0x8
0x8c6839e64ac   16c  4883e4f0             REX.W andq rsp,0xf0
0x8c6839e64b0   170  4c891424             REX.W movq [rsp],r10
0x8c6839e64b4   174  488b05c1feffff       REX.W movq rax,[rip+0xfffffec1]
0x8c6839e64bb   17b  ffd0                 call rax
0x8c6839e64bd   17d  e8deecffff           call 0x8c6839e51a0  (jump table)
0x8c6839e64c2   182  e976ffffff           jmp 0x8c6839e643d  <+0xfd>
0x8c6839e64c7   187  90                   nop

Source positions:
 pc offset  position
        53         1
        e2         7
       12a         0  statement
       139         3  statement
       15b         3  statement
       17d         7  statement

Safepoints (stack slots = 8, entries = 1, byte size = 14)
0x8c6839e6398     58  slots (sp->fp): 00000000

RelocInfo (size = 0)

--- End code ---
   1: ~wasm-function[3] {
   1: } -> 31414
   1: } -> 0x32a300000011 <undefined>
   1: ~workerN.onmessage+0(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028c305 <Object map = 0x32a30009a58d>) {
Resolving worker message
   1: } -> 0x32a300000011 <undefined>
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 161
   1: } -> 0x32a300000011 <undefined>
   1: ~workerN.onmessage+0(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028c3b5 <Object map = 0x32a30009a58d>) {
Resolving worker message
   1: } -> 0x32a300000011 <undefined>
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 31414
   1: } -> 0x32a300000011 <undefined>
   1: ~workerN.onmessage+0(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028c465 <Object map = 0x32a30009a58d>) {
Resolving worker message
   1: } -> 0x32a300000011 <undefined>
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 31414
   1: } -> 0x32a300000011 <undefined>
   1: ~workerN.onmessage+0(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028c515 <Object map = 0x32a30009a58d>) {
Resolving worker message
   1: } -> 0x32a300000011 <undefined>
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 161
   1: } -> 0x32a300000011 <undefined>
   1: ~workerN.onmessage+0(this=0x32a300081a25 <JSGlobalProxy>, 0x32a30028c5c5 <Object map = 0x32a30009a58d>) {
Resolving worker message
   1: } -> 0x32a300000011 <undefined>
   2:  } -> 0x32a300289b51 <Promise map = 0x32a3000899ad>
##Benchmark Start##
Worker 0 Value: 31414 Time (ms): 1379.031
Worker 1 Value: 161 Time (ms): 2361.537
Worker 2 Value: 31414 Time (ms): 2466.081
Worker 3 Value: 31414 Time (ms): 2135.2219999999998
Worker 4 Value: 161 Time (ms): 1878.799
   1: ~wasm-function[3] {
   1: } -> 161
Final total count: 161
##Benchmark End##
   2:  } -> 0x32a300289a89 <Promise map = 0x32a3000899ad>
   1: ~+0(this=0x32a300081a25 <JSGlobalProxy>) {
Finished.
   1: } -> 0x32a300000011 <undefined>
  +0  module header       : 8 bytes
  +8  uint8_t             : 01 = 1
  +9  section size        : 10 = 16
  +10  section payload     : 16 bytes
  +26  uint8_t             : 02 = 2
  +27  section size        : 10 = 16
  +28  section payload     : 16 bytes
  +44  uint8_t             : 03 = 3
  +45  section size        : 0b = 11
  +46  section payload     : 11 bytes
  +57  uint8_t             : 07 = 7
  +58  section size        : ca 01 = 202
  +60  section payload     : 202 bytes
  +262  uint8_t             : 0a = 10
  +263  section size        : 8e 03 = 398
