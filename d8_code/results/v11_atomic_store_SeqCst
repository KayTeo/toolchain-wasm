   1: ~+0(this=0x067e00081a25 <JSGlobalProxy>) {
   2:  ~+0(this=0x067e00081a25 <JSGlobalProxy>) {
   2:  } -> 0x067e00000011 <undefined>
00 61 73 6d 01 00 00 00 01 Section: Type
Decode Section 0x57670876ff5a - 0x57670876ff6a
DecodeType[0] module+1
60   +13  value type          : 1 bytes
  +15  value type          : 1 bytes
DecodeType[1] module+6
60   +18  value type          : 1 bytes
  +19  value type          : 1 bytes
  +21  value type          : 1 bytes
DecodeType[2] module+12
60   +25  value type          : 1 bytes
  +10  skip                : 16 bytes
02 Section: Import
Decode Section 0x57670876ff6c - 0x57670876ff7c
DecodeImportTable[0] module+1
  +30  module name         : 3 bytes
  +34  field name          : 6 bytes
02   +41  memory limits flags : 03 = 3
  +28  skip                : 16 bytes
03 Section: Function
Decode Section 0x57670876ff7e - 0x57670876ff89
  +47  signature index     : 00 = 0
  +48  signature index     : 00 = 0
  +49  signature index     : 01 = 1
  +50  signature index     : 00 = 0
  +51  signature index     : 01 = 1
  +52  signature index     : 00 = 0
  +53  signature index     : 01 = 1
  +54  signature index     : 01 = 1
  +55  signature index     : 02 = 2
  +56  signature index     : 01 = 1
  +46  skip                : 11 bytes
07 Section: Export
Decode Section 0x57670876ff8c - 0x576708770056
DecodeExportTable[0] module+1
  +62  field name          : 16 bytes
00 DecodeExportTable[1] module+20
  +81  field name          : 23 bytes
00 DecodeExportTable[2] module+46
  +107  field name          : 19 bytes
00 DecodeExportTable[3] module+68
  +129  field name          : 8 bytes
00 DecodeExportTable[4] module+79
  +140  field name          : 10 bytes
00 DecodeExportTable[5] module+92
  +153  field name          : 21 bytes
00 DecodeExportTable[6] module+116
  +177  field name          : 12 bytes
00 DecodeExportTable[7] module+131
  +192  field name          : 17 bytes
00 DecodeExportTable[8] module+151
  +212  field name          : 21 bytes
00 DecodeExportTable[9] module+175
  +236  field name          : 24 bytes
00   +60  skip                : 202 bytes
0a Section: Code
Decode Section 0x576708770059 - 0x5767087701c1
  +267  function body       : 20 bytes
  +288  function body       : 10 bytes
  +299  function body       : 40 bytes
  +340  function body       : 8 bytes
  +349  function body       : 50 bytes
  +400  function body       : 14 bytes
  +415  function body       : 46 bytes
  +462  function body       : 84 bytes
  +547  function body       : 39 bytes
  +587  function body       : 38 bytes
  +265  skip                : 360 bytes
  +0  module header       : 8 bytes
  +8  uint8_t             : 01 = 1
  +9  section size        : 10 = 16
  +10  section payload     : 16 bytes
  +26  uint8_t             : 02 = 2
  +27  section size        : 10 = 16
  +28  section payload     : 16 bytes
  +44  uint8_t             : 03 = 3
  +45  section size        : 0b = 11
  +46  section payload     : 11 bytes
  +57  uint8_t             : 07 = 7
  +58  section size        : ca 01 = 202
  +60  section payload     : 202 bytes
  +262  uint8_t             : 0a = 10
  +263  section size        : e8 02 = 360
local decls count: 0
local decls count: 0
local decls count: 1
  +267  skip                : 1 bytes
local decls count: 0
wasm-decode 0x57670877005b...0x57670877006f (module+268, 20 bytes)
  +340  skip                : 1 bytes
  +288  skip                : 1 bytes
wasm-decode 0x5767087700a4...0x5767087700ac (module+341, 8 bytes)
wasm-decode 0x576708770070...0x57670877007a (module+289, 10 bytes)
  +299  skip                : 3 bytes
wasm-decode 0x57670877007b...0x5767087700a3 (module+302, 40 bytes)
  @3        #i32.const                     | B1 |  i
  @1        #local.get                     | B1 |  i
  @1        #local.get                     | B1 |  i
  @1        #local.get                     | B1 |  i
  @3        #i32.const                     | B1 |  i i
  @3        #local.get                     | B1 |  i i
  @5        #local.set                     | B1 | 
  @5        #i32.load                      | B1 |  i i
  @5        #i32.atomic.rmw.add            | B1 |  i
  @8        #i32.const                     | B1 |  i i i
  @3        #i32.atomic.load               | B1 |  i
  @10       #i32.add                       | B1 |  i i
  @9        #end                           |
  @9        #(implicit) return             |  | 
wasm-decode ok

  @7        #loop                          | B1L0 | 
  @7        #end                           |
  @7        #(implicit) return             |  | 
wasm-decode ok

  @11       #i32.store                     | B1 | 
  @9        #local.get                     | B1L0 |  i
  @14       #local.get                     | B1 |  i
  @16       #i32.load                      | B1 |  i
  @11       #i32.const                     | B1L0 |  i i
  @19       #end                           |
  @19       #(implicit) return             |  | 
wasm-decode ok

  @13       #i32.atomic.rmw.add            | B1L0 |  i
local decls count: 1
local decls count: 1
local decls count: 1
  @17       #drop                          | B1L0 | 
  +415  skip                : 3 bytes
  +349  skip                : 3 bytes
  @18       #local.get                     | B1L0 |  i
  +400  skip                : 3 bytes
wasm-decode 0x5767087700ef...0x57670877011d (module+418, 46 bytes)
wasm-decode 0x5767087700e0...0x5767087700ee (module+403, 14 bytes)
wasm-decode 0x5767087700ad...0x5767087700df (module+352, 50 bytes)
  @20       #i32.const                     | B1L0 |  i i
  @3        #local.get                     | B1 |  i
  @3        #i32.const                     | B1 |  i
  @3        #i32.const                     | B1 |  i
  @22       #i32.add                       | B1L0 |  i
  @5        #i32.const                     | B1 |  i i
  @5        #local.set                     | B1 | 
  @5        #local.set                     | B1 | 
  @23       #local.set                     | B1L0 | 
  @25       #local.get                     | B1L0 |  i
  @7        #i32.atomic.store              | B1 | 
  @7        #loop                          | B1L0 | 
  @7        #loop                          | B1L0 | 
  @27       #local.get                     | B1L0 |  i i
  @11       #local.get                     | B1 |  i
  @9        #local.get                     | B1L0 |  i
  @9        #local.get                     | B1L0 |  i
  @13       #end                           |
  @13       #(implicit) return             |  | 
wasm-decode ok

  @29       #i32.lt_u                      | B1L0 |  i
  @11       #i32.const                     | B1L0 |  i i
  @11       #i32.atomic.load               | B1L0 |  i
local decls count: 1
  @15       #local.set                     | B1L0 | 
  +462  skip                : 3 bytes
  @30       #br_if                         | B1L0 | 
wasm-decode 0x57670877011e...0x576708770172 (module+465, 84 bytes)
  @17       #local.get                     | B1L0 |  i
  @15       #i32.atomic.store              | B1L0 | 
  @19       #i32.const                     | B1L0 |  i i
  @3        #i32.const                     | B1 |  i
  @19       #local.get                     | B1L0 |  i
  @32       #end                           | B1 | 
  @21       #i32.add                       | B1L0 |  i
  @5        #local.set                     | B1 | 
  @21       #i32.const                     | B1L0 |  i i
  @33       #local.get                     | B1 |  i
  @22       #local.set                     | B1L0 | 
  @7        #loop                          | B1L0 | 
  @24       #local.get                     | B1L0 |  i
  @24       #i32.atomic.store              | B1L0 | 
  @9        #local.get                     | B1L0 |  i
  @26       #local.get                     | B1L0 |  i i
  @28       #local.get                     | B1L0 |  i
  @35       #i32.atomic.load               | B1 |  i
  @11       #i32.const                     | B1L0 |  i i
  @30       #i32.const                     | B1L0 |  i i
  @39       #end                           |
  @39       #(implicit) return             |  | 
wasm-decode ok

  @28       #i32.atomic.store              | B1L0 | 
  @32       #i32.add                       | B1L0 |  i
  @33       #local.set                     | B1L0 | 
  @32       #local.get                     | B1L0 |  i
  @35       #local.get                     | B1L0 |  i
  @37       #local.get                     | B1L0 |  i i
  @34       #i32.const                     | B1L0 |  i i
  @36       #i32.add                       | B1L0 |  i
  @15       #i32.atomic.store              | B1L0 | 
  @39       #i32.lt_u                      | B1L0 |  i
  @37       #local.set                     | B1L0 | 
  @40       #br_if                         | B1L0 | 
  @19       #local.get                     | B1L0 |  i
  @42       #end                           | B1 | 
  @39       #local.get                     | B1L0 |  i
local decls count: 1
  @21       #i32.const                     | B1L0 |  i i
  @43       #local.get                     | B1 |  i
  @41       #local.get                     | B1L0 |  i i
  @45       #end                           |
  @45       #(implicit) return             |  | 
  +547  skip                : 3 bytes
wasm-decode ok

  @43       #i32.lt_u                      | B1L0 |  i
wasm-decode 0x576708770173...0x57670877019a (module+550, 39 bytes)
  @25       #i32.atomic.store              | B1L0 | 
  @44       #br_if                         | B1L0 | 
  @29       #local.get                     | B1L0 |  i
  @3        #i32.const                     | B1 |  i
  @46       #end                           | B1 | 
  @31       #i32.const                     | B1L0 |  i i
  @47       #local.get                     | B1 |  i
  @5        #local.set                     | B1 | 
local decls count: 1
  @49       #end                           |
  @49       #(implicit) return             |  | 
wasm-decode ok

  @7        #loop                          | B1L0 | 
  +587  skip                : 3 bytes
  @34       #i32.atomic.store              | B1L0 | 
wasm-decode 0x57670877019b...0x5767087701c1 (module+590, 38 bytes)
  @9        #i32.const                     | B1L0 |  i
  @38       #local.get                     | B1L0 |  i
  @11       #i32.const                     | B1L0 |  i i
  @3        #i32.const                     | B1 |  i
  @40       #i32.const                     | B1L0 |  i i
  @5        #local.set                     | B1 | 
  @43       #i32.atomic.store              | B1L0 | 
  @15       #i32.atomic.store              | B1L0 | 
  @7        #loop                          | B1L0 | 
  @47       #local.get                     | B1L0 |  i
  @19       #local.get                     | B1L0 |  i
  @9        #local.get                     | B1L0 |  i
  @21       #i32.const                     | B1L0 |  i i
  @49       #i32.const                     | B1L0 |  i i
  @11       #local.get                     | B1L0 |  i i
  @23       #i32.add                       | B1L0 |  i
  @52       #i32.atomic.store              | B1L0 | 
  @13       #i32.const                     | B1L0 |  i i i
  @56       #local.get                     | B1L0 |  i
  @15       #i32.add                       | B1L0 |  i i
  @24       #local.set                     | B1L0 | 
  @58       #i32.const                     | B1L0 |  i i
  @26       #local.get                     | B1L0 |  i
  @16       #i32.atomic.store              | B1L0 | 
  @28       #i32.const                     | B1L0 |  i i
  @62       #i32.atomic.store              | B1L0 | 
  @32       #i32.lt_u                      | B1L0 |  i
  @33       #br_if                         | B1L0 | 
  @20       #local.get                     | B1L0 |  i
  @66       #local.get                     | B1L0 |  i
  @35       #end                           | B1 | 
  @36       #local.get                     | B1 |  i
  @22       #i32.const                     | B1L0 |  i i
  @68       #i32.const                     | B1L0 |  i i
  @38       #end                           |
  @38       #(implicit) return             |  | 
wasm-decode ok

  @24       #i32.add                       | B1L0 |  i
  @70       #i32.add                       | B1L0 |  i
  @25       #local.set                     | B1L0 | 
  @71       #local.set                     | B1L0 | 
  @27       #local.get                     | B1L0 |  i
  @29       #local.get                     | B1L0 |  i i
  @73       #local.get                     | B1L0 |  i
  @75       #local.get                     | B1L0 |  i i
  @31       #i32.lt_u                      | B1L0 |  i
  @77       #i32.lt_u                      | B1L0 |  i
  @32       #br_if                         | B1L0 | 
  @34       #end                           | B1 | 
  @78       #br_if                         | B1L0 | 
  @35       #local.get                     | B1 |  i
  @80       #end                           | B1 | 
  @37       #end                           |
  @37       #(implicit) return             |  | 
wasm-decode ok

  @81       #local.get                     | B1 |  i
  @83       #end                           |
  @83       #(implicit) return             |  | 
wasm-decode ok

  +0  module header       : 8 bytes
  +8  uint8_t             : 01 = 1
  +9  section size        : 10 = 16
  +10  section payload     : 16 bytes
  +26  uint8_t             : 02 = 2
  +27  section size        : 10 = 16
  +28  section payload     : 16 bytes
  +44  uint8_t             : 03 = 3
  +45  section size        : 0b = 11
  +46  section payload     : 11 bytes
  +57  uint8_t             : 07 = 7
  +58  section size        : ca 01 = 202
  +60  section payload     : 202 bytes
  +262  uint8_t             : 0a = 10
  +263  section size        : e8 02 = 360
   2:  ~main+15(this=0x067e00081a25 <JSGlobalProxy>) {
   3:   ~runWorkers+15(this=0x067e00081a25 <JSGlobalProxy>, 0x067e00289a11 <Module map = 0x67e0008fbb5>, 0x067e00099e0d <Memory map = 0x67e0008ff39>, 0x067e00099c5d <JSFunction workerCode (sfi = 0x67e000999e9)>, 5) {
   1: ~+0(this=0x067e00441a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x067e00441a25 <JSGlobalProxy>) {
   2:  } -> 0x067e00000011 <undefined>
   1: } -> 0x067e00000011 <undefined>
   4:    ~sendMessageToWorker+24(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028b5e1 <Object map = 0x67e0009a1ed>, 0x067e00289be1 <Worker map = 0x67e00095ea9>) {
   6:      ~+9(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028b729 <JSFunction (sfi = 0x67e002511e5)>, 0x067e0028b745 <JSFunction (sfi = 0x67e00251215)>) {
   6:      } -> 0x067e00000011 <undefined>
   4:    } -> 0x067e0028b69d <Promise map = 0x67e000899ad>
   4:    ~sendMessageToWorker+24(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028b835 <Object map = 0x67e0009a1ed>, 0x067e0028a151 <Worker map = 0x67e00095ea9>) {
   6:      ~+9(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028b92d <JSFunction (sfi = 0x67e002511e5)>, 0x067e0028b949 <JSFunction (sfi = 0x67e00251215)>) {
   6:      } -> 0x067e00000011 <undefined>
   4:    } -> 0x067e0028b8a1 <Promise map = 0x67e000899ad>
   4:    ~sendMessageToWorker+24(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028b9a5 <Object map = 0x67e0009a1ed>, 0x067e0028a675 <Worker map = 0x67e00095ea9>) {
   6:      ~+9(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028ba9d <JSFunction (sfi = 0x67e002511e5)>, 0x067e0028bab9 <JSFunction (sfi = 0x67e00251215)>) {
   6:      } -> 0x067e00000011 <undefined>
   4:    } -> 0x067e0028ba11 <Promise map = 0x67e000899ad>
   4:    ~sendMessageToWorker+24(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028bb15 <Object map = 0x67e0009a1ed>, 0x067e0028ab99 <Worker map = 0x67e00095ea9>) {
   6:      ~+9(this=   1: 0x067e00081a25 <JSGlobalProxy>, 0x067e0028bc0d ~<JSFunction (sfi = 0x67e002511e5)>, 0x067e0028bc29 <JSFunction (sfi = 0x67e00251215)>) {
onmessage+0(this=0x067e00441a25 <JSGlobalProxy>, 0x067e000c900d <Object map = 0x67e00459b19>) {
   6:      } -> 0x067e00000011 <undefined>
   4:    } -> 0x067e0028bb81 <Promise map = 0x67e000899ad>
   4:    ~sendMessageToWorker+24(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028bc85 <Object map = 0x67e0009a1ed>, 0x067e0028b0bd <Worker map = 0x67e00095ea9>) {
   6:      ~+9(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028bd7d <JSFunction (sfi = 0x67e002511e5)>, 0x067e0028bd99 <JSFunction (sfi = 0x67e00251215)>) {
   6:      } -> 0x067e00000011 <undefined>
   4:    } -> 0x067e0028bcf1 <Promise map = 0x67e000899ad>
   1: } -> 0x067e0028c165 <Promise map = 0x67e000899ad>
local decls count: 1
  +415  skip                : 3 bytes
wasm-decode 0x5767087700ef...0x57670877011d (module+418, 46 bytes)
[]; [i32:s0x24, i32:s0x28, i32:c0, i32:c0]
  @3        #i32.const                     | B1 |  i
[]; [i32:s0x24, i32:s0x28, i32:c0, i32:c0, i32:c0]
  @5        #local.set                     | B1 | 
[]; [i32:s0x24, i32:s0x28, i32:c0, i32:c0]
  @7        #loop                          | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @9        #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @11       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c31414]
[DEBUG]AtomicOp called
[DEBUG] AtomicStore emitting xchgl
  @15       #i32.atomic.store              | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @19       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @21       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c161]
[DEBUG]AtomicOp called
[DEBUG] AtomicStore emitting xchgl
  @24       #i32.atomic.store              | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @28       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @30       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c1]
  @32       #i32.add                       | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @33       #local.set                     | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30]
  @35       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30, i32:rax]
  @37       #local.get                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30, i32:rax, i32:rcx]
  @39       #i32.lt_u                      | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30, i32:rax, i32:rcx]
  @40       #br_if                         | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rbx, i32:s0x30]
  @42       #end                           | B1 | 
[]; [i32:s0x24, i32:s0x28, i32:rbx, i32:s0x30]
  @43       #local.get                     | B1 |  i
[]; [i32:s0x24, i32:s0x28, i32:rbx, i32:s0x30, i32:rax]
  @45       #end                           |
  @45       #(implicit) return             |  | 
wasm-decode ok

  +0  module header       : 8 bytes
01   +10  skip                : 16 bytes
02   +28  skip                : 16 bytes
03   +46  skip                : 11 bytes
07   +60  skip                : 202 bytes
0a   +265  skip                : 360 bytes
--- WebAssembly code ---
name: wasm-function[6]
index: 6
kind: wasm function
compiler: Liftoff
Body (size = 704 = 700 + 4 padding)
Instructions (size = 684)
0x12f37273a940     0  55                   push rbp
0x12f37273a941     1  4889e5               REX.W movq rbp,rsp
0x12f37273a944     4  6a08                 push 0x8
0x12f37273a946     6  56                   push rsi
0x12f37273a947     7  4881ec28000000       REX.W subq rsp,0x28
0x12f37273a94e     e  8bc0                 movl rax,rax
0x12f37273a950    10  8bd2                 movl rdx,rdx
0x12f37273a952    12  8b4eff               movl rcx,[rsi-0x1]
0x12f37273a955    15  4903ce               REX.W addq rcx,r14
0x12f37273a958    18  0fb74907             movzxwl rcx,[rcx+0x7]
0x12f37273a95c    1c  81f9bf000000         cmpl rcx,0xbf
0x12f37273a962    22  0f8420000000         jz 0x12f37273a988  <+0x48>
0x12f37273a968    28  bf4a000000           movl rdi,0x4a
0x12f37273a96d    2d  4989e2               REX.W movq r10,rsp
0x12f37273a970    30  4883ec08             REX.W subq rsp,0x8
0x12f37273a974    34  4883e4f0             REX.W andq rsp,0xf0
0x12f37273a978    38  4c891424             REX.W movq [rsp],r10
0x12f37273a97c    3c  48b8d0b4e9d858710000 REX.W movq rax,0x7158d8e9b4d0
0x12f37273a986    46  ffd0                 call rax
0x12f37273a988    48  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x12f37273a98c    4c  0f86a2010000         jna 0x12f37273ab34  <+0x1f4>
0x12f37273a992    52  8945dc               movl [rbp-0x24],rax
0x12f37273a995    55  8955d8               movl [rbp-0x28],rdx
0x12f37273a998    58  e843faffff           call 0x12f37273a3e0  (jump table)
0x12f37273a99d    5d  c745d400000000       movl [rbp-0x2c],0x0
0x12f37273a9a4    64  c745d000000000       movl [rbp-0x30],0x0
0x12f37273a9ab    6b  8b45dc               movl rax,[rbp-0x24]
0x12f37273a9ae    6e  b9b67a0000           movl rcx,0x7ab6
0x12f37273a9b3    73  8bd0                 movl rdx,rax
0x12f37273a9b5    75  83e203               andl rdx,0x3
0x12f37273a9b8    78  85d2                 testl rdx,rdx
0x12f37273a9ba    7a  0f8586010000         jnz 0x12f37273ab46  <+0x206>
0x12f37273a9c0    80  41baffffffff         movl r10,0xffffffff
0x12f37273a9c6    86  493bc2               REX.W cmpq rax,r10
0x12f37273a9c9    89  761d                 jna 0x12f37273a9e8  <+0xa8>
0x12f37273a9cb    8b  bf01000000           movl rdi,0x1
0x12f37273a9d0    90  4989e2               REX.W movq r10,rsp
0x12f37273a9d3    93  4883ec08             REX.W subq rsp,0x8
0x12f37273a9d7    97  4883e4f0             REX.W andq rsp,0xf0
0x12f37273a9db    9b  4c891424             REX.W movq [rsp],r10
0x12f37273a9df    9f  488b0598ffffff       REX.W movq rax,[rip+0xffffff98]
0x12f37273a9e6    a6  ffd0                 call rax
0x12f37273a9e8    a8  488b75f0             REX.W movq rsi,[rbp-0x10]
0x12f37273a9ec    ac  488b5e1f             REX.W movq rbx,[rsi+0x1f]
0x12f37273a9f0    b0  ba03000000           movl rdx,0x3
0x12f37273a9f5    b5  48f7da               REX.W negq rdx
0x12f37273a9f8    b8  4803d3               REX.W addq rdx,rbx
0x12f37273a9fb    bb  483bc2               REX.W cmpq rax,rdx
0x12f37273a9fe    be  0f8364010000         jnc 0x12f37273ab68  <+0x228>
0x12f37273aa04    c4  488b5617             REX.W movq rdx,[rsi+0x17]
0x12f37273aa08    c8  41baffffffff         movl r10,0xffffffff
0x12f37273aa0e    ce  493bc2               REX.W cmpq rax,r10
0x12f37273aa11    d1  761d                 jna 0x12f37273aa30  <+0xf0>
0x12f37273aa13    d3  bf01000000           movl rdi,0x1
0x12f37273aa18    d8  4989e2               REX.W movq r10,rsp
0x12f37273aa1b    db  4883ec08             REX.W subq rsp,0x8
0x12f37273aa1f    df  4883e4f0             REX.W andq rsp,0xf0
0x12f37273aa23    e3  4c891424             REX.W movq [rsp],r10
0x12f37273aa27    e7  488b0550ffffff       REX.W movq rax,[rip+0xffffff50]
0x12f37273aa2e    ee  ffd0                 call rax
0x12f37273aa30    f0  870c02               xchgl rcx,[rdx+rax*1]
0x12f37273aa33    f3  8b45dc               movl rax,[rbp-0x24]
0x12f37273aa36    f6  b9a1000000           movl rcx,0xa1
0x12f37273aa3b    fb  8bd8                 movl rbx,rax
0x12f37273aa3d    fd  83e303               andl rbx,0x3
0x12f37273aa40   100  85db                 testl rbx,rbx
0x12f37273aa42   102  0f8542010000         jnz 0x12f37273ab8a  <+0x24a>
0x12f37273aa48   108  41baffffffff         movl r10,0xffffffff
0x12f37273aa4e   10e  493bc2               REX.W cmpq rax,r10
0x12f37273aa51   111  761d                 jna 0x12f37273aa70  <+0x130>
0x12f37273aa53   113  bf01000000           movl rdi,0x1
0x12f37273aa58   118  4989e2               REX.W movq r10,rsp
0x12f37273aa5b   11b  4883ec08             REX.W subq rsp,0x8
0x12f37273aa5f   11f  4883e4f0             REX.W andq rsp,0xf0
0x12f37273aa63   123  4c891424             REX.W movq [rsp],r10
0x12f37273aa67   127  488b0510ffffff       REX.W movq rax,[rip+0xffffff10]
0x12f37273aa6e   12e  ffd0                 call rax
0x12f37273aa70   130  488b7e1f             REX.W movq rdi,[rsi+0x1f]
0x12f37273aa74   134  bb03000000           movl rbx,0x3
0x12f37273aa79   139  48f7db               REX.W negq rbx
0x12f37273aa7c   13c  4803df               REX.W addq rbx,rdi
0x12f37273aa7f   13f  483bc3               REX.W cmpq rax,rbx
0x12f37273aa82   142  0f8324010000         jnc 0x12f37273abac  <+0x26c>
0x12f37273aa88   148  41baffffffff         movl r10,0xffffffff
0x12f37273aa8e   14e  493bc2               REX.W cmpq rax,r10
0x12f37273aa91   151  761d                 jna 0x12f37273aab0  <+0x170>
0x12f37273aa93   153  bf01000000           movl rdi,0x1
0x12f37273aa98   158  4989e2               REX.W movq r10,rsp
0x12f37273aa9b   15b  4883ec08             REX.W subq rsp,0x8
0x12f37273aa9f   15f  4883e4f0             REX.W andq rsp,0xf0
0x12f37273aaa3   163  4c891424             REX.W movq [rsp],r10
0x12f37273aaa7   167  488b05d0feffff       REX.W movq rax,[rip+0xfffffed0]
0x12f37273aaae   16e  ffd0                 call rax
0x12f37273aab0   170  870c02               xchgl rcx,[rdx+rax*1]
0x12f37273aab3   173  8b45d4               movl rax,[rbp-0x2c]
0x12f37273aab6   176  83c001               addl rax,0x1
0x12f37273aab9   179  8b4dd8               movl rcx,[rbp-0x28]
0x12f37273aabc   17c  8bd8                 movl rbx,rax
0x12f37273aabe   17e  3bc1                 cmpl rax,rcx
0x12f37273aac0   180  0f831a000000         jnc 0x12f37273aae0  <+0x1a0>
0x12f37273aac6   186  4c8b565f             REX.W movq r10,[rsi+0x5f]
0x12f37273aaca   18a  41816a182f010000     subl [r10+0x18],0x12f
0x12f37273aad2   192  0f88f6000000         js 0x12f37273abce  <+0x28e>
0x12f37273aad8   198  895dd4               movl [rbp-0x2c],rbx
0x12f37273aadb   19b  e9cbfeffff           jmp 0x12f37273a9ab  <+0x6b>
0x12f37273aae0   1a0  8b45d0               movl rax,[rbp-0x30]
0x12f37273aae3   1a3  895dd4               movl [rbp-0x2c],rbx
0x12f37273aae6   1a6  8945cc               movl [rbp-0x34],rax
0x12f37273aae9   1a9  488d45cc             REX.W leaq rax,[rbp-0x34]
0x12f37273aaed   1ad  e8fef8ffff           call 0x12f37273a3f0  (jump table)
0x12f37273aaf2   1b2  4c8b55f0             REX.W movq r10,[rbp-0x10]
0x12f37273aaf6   1b6  4d8b525f             REX.W movq r10,[r10+0x5f]
0x12f37273aafa   1ba  41816a18ee010000     subl [r10+0x18],0x1ee
0x12f37273ab02   1c2  0f88d8000000         js 0x12f37273abe0  <+0x2a0>
0x12f37273ab08   1c8  8b45cc               movl rax,[rbp-0x34]
0x12f37273ab0b   1cb  48837df808           REX.W cmpq [rbp-0x8],0x8
0x12f37273ab10   1d0  741d                 jz 0x12f37273ab2f  <+0x1ef>
0x12f37273ab12   1d2  bf30000000           movl rdi,0x30
0x12f37273ab17   1d7  4989e2               REX.W movq r10,rsp
0x12f37273ab1a   1da  4883ec08             REX.W subq rsp,0x8
0x12f37273ab1e   1de  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ab22   1e2  4c891424             REX.W movq [rsp],r10
0x12f37273ab26   1e6  488b0551feffff       REX.W movq rax,[rip+0xfffffe51]
0x12f37273ab2d   1ed  ffd0                 call rax
0x12f37273ab2f   1ef  488be5               REX.W movq rsp,rbp
0x12f37273ab32   1f2  5d                   pop rbp
0x12f37273ab33   1f3  c3                   retl
0x12f37273ab34   1f4  50                   push rax
0x12f37273ab35   1f5  52                   push rdx
0x12f37273ab36   1f6  e815f8ffff           call 0x12f37273a350  (jump table)
0x12f37273ab3b   1fb  5a                   pop rdx
0x12f37273ab3c   1fc  58                   pop rax
0x12f37273ab3d   1fd  488b75f0             REX.W movq rsi,[rbp-0x10]
0x12f37273ab41   201  e94cfeffff           jmp 0x12f37273a992  <+0x52>
0x12f37273ab46   206  e855f5ffff           call 0x12f37273a0a0  (jump table)
0x12f37273ab4b   20b  bf3c000000           movl rdi,0x3c
0x12f37273ab50   210  4989e2               REX.W movq r10,rsp
0x12f37273ab53   213  4883ec08             REX.W subq rsp,0x8
0x12f37273ab57   217  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ab5b   21b  4c891424             REX.W movq [rsp],r10
0x12f37273ab5f   21f  488b0518feffff       REX.W movq rax,[rip+0xfffffe18]
0x12f37273ab66   226  ffd0                 call rax
0x12f37273ab68   228  e823f5ffff           call 0x12f37273a090  (jump table)
0x12f37273ab6d   22d  bf3c000000           movl rdi,0x3c
0x12f37273ab72   232  4989e2               REX.W movq r10,rsp
0x12f37273ab75   235  4883ec08             REX.W subq rsp,0x8
0x12f37273ab79   239  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ab7d   23d  4c891424             REX.W movq [rsp],r10
0x12f37273ab81   241  488b05f6fdffff       REX.W movq rax,[rip+0xfffffdf6]
0x12f37273ab88   248  ffd0                 call rax
0x12f37273ab8a   24a  e811f5ffff           call 0x12f37273a0a0  (jump table)
0x12f37273ab8f   24f  bf3c000000           movl rdi,0x3c
0x12f37273ab94   254  4989e2               REX.W movq r10,rsp
0x12f37273ab97   257  4883ec08             REX.W subq rsp,0x8
0x12f37273ab9b   25b  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ab9f   25f  4c891424             REX.W movq [rsp],r10
0x12f37273aba3   263  488b05d4fdffff       REX.W movq rax,[rip+0xfffffdd4]
0x12f37273abaa   26a  ffd0                 call rax
0x12f37273abac   26c  e8dff4ffff           call 0x12f37273a090  (jump table)
0x12f37273abb1   271  bf3c000000           movl rdi,0x3c
0x12f37273abb6   276  4989e2               REX.W movq r10,rsp
0x12f37273abb9   279  4883ec08             REX.W subq rsp,0x8
0x12f37273abbd   27d  4883e4f0             REX.W andq rsp,0xf0
0x12f37273abc1   281  4c891424             REX.W movq [rsp],r10
0x12f37273abc5   285  488b05b2fdffff       REX.W movq rax,[rip+0xfffffdb2]
0x12f37273abcc   28c  ffd0                 call rax
0x12f37273abce   28e  52                   push rdx
0x12f37273abcf   28f  53                   push rbx
0x12f37273abd0   290  e8cbf5ffff           call 0x12f37273a1a0  (jump table)
0x12f37273abd5   295  5b                   pop rbx
0x12f37273abd6   296  5a                   pop rdx
0x12f37273abd7   297  488b75f0             REX.W movq rsi,[rbp-0x10]
0x12f37273abdb   29b  e9f8feffff           jmp 0x12f37273aad8  <+0x198>
0x12f37273abe0   2a0  e8bbf5ffff           call 0x12f37273a1a0  (jump table)
0x12f37273abe5   2a5  e91effffff           jmp 0x12f37273ab08  <+0x1c8>
0x12f37273abea   2aa  6690                 nop

Source positions:
 pc offset  position
        58         3
       1ad        45
       1f6         0  statement
       206        15  statement
       228        15  statement
       24a        24  statement
       26c        24  statement
       290        40  statement
       2a0        45  statement

Safepoints (stack slots = 11, entries = 1, byte size = 15)
0x12f37273a99d     5d  slots (sp->fp): 00000000000

RelocInfo (size = 0)

--- End code ---
   1: ~wasm-function[6] {
local decls count: 1
  +415  skip                : 3 bytes
wasm-decode 0x5767087700ef...0x57670877011d (module+418, 46 bytes)
  @3        #i32.const                     | B1 |  i
  @5        #local.set                     | B1 | 
  @7        #loop                          | B1L0 | 
  @9        #local.get                     | B1L0 |  i
  @11       #i32.const                     | B1L0 |  i i
  @15       #i32.atomic.store              | B1L0 | 
  @19       #local.get                     | B1L0 |  i
  @21       #i32.const                     | B1L0 |  i i
  @24       #i32.atomic.store              | B1L0 | 
  @28       #local.get                     | B1L0 |  i
  @30       #i32.const                     | B1L0 |  i i
  @32       #i32.add                       | B1L0 |  i
  @33       #local.set                     | B1L0 | 
  @35       #local.get                     | B1L0 |  i
  @37       #local.get                     | B1L0 |  i i
  @39       #i32.lt_u                      | B1L0 |  i
  @40       #br_if                         | B1L0 | 
  @42       #end                           | B1 | 
  @43       #local.get                     | B1 |  i
  @45       #end                           |
  @45       #(implicit) return             |  | 
wasm-decode ok

--- WebAssembly code ---
name: wasm-function[6]
index: 6
kind: wasm function
compiler: TurboFan
Body (size = 1088 = 1052 + 36 padding)
Instructions (size = 1036)
0x12f37273ac00     0  55                   push rbp
0x12f37273ac01     1  4889e5               REX.W movq rbp,rsp
0x12f37273ac04     4  6a08                 push 0x8
0x12f37273ac06     6  56                   push rsi
0x12f37273ac07     7  4883ec48             REX.W subq rsp,0x48
0x12f37273ac0b     b  488b4e17             REX.W movq rcx,[rsi+0x17]
0x12f37273ac0f     f  8b7eff               movl rdi,[rsi-0x1]
0x12f37273ac12    12  41baffffffff         movl r10,0xffffffff
0x12f37273ac18    18  493bfa               REX.W cmpq rdi,r10
0x12f37273ac1b    1b  7620                 jna 0x12f37273ac3d  <+0x3d>
0x12f37273ac1d    1d  bf01000000           movl rdi,0x1
0x12f37273ac22    22  4989e2               REX.W movq r10,rsp
0x12f37273ac25    25  4883ec08             REX.W subq rsp,0x8
0x12f37273ac29    29  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ac2d    2d  4c891424             REX.W movq [rsp],r10
0x12f37273ac31    31  48b8d0b4e9d858710000 REX.W movq rax,0x7158d8e9b4d0
0x12f37273ac3b    3b  ffd0                 call rax
0x12f37273ac3d    3d  410fb77c3e07         movzxwl rdi,[r14+rdi*1+0x7]
0x12f37273ac43    43  41baffffffff         movl r10,0xffffffff
0x12f37273ac49    49  493bfa               REX.W cmpq rdi,r10
0x12f37273ac4c    4c  761d                 jna 0x12f37273ac6b  <+0x6b>
0x12f37273ac4e    4e  bf01000000           movl rdi,0x1
0x12f37273ac53    53  4989e2               REX.W movq r10,rsp
0x12f37273ac56    56  4883ec08             REX.W subq rsp,0x8
0x12f37273ac5a    5a  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ac5e    5e  4c891424             REX.W movq [rsp],r10
0x12f37273ac62    62  488b05caffffff       REX.W movq rax,[rip+0xffffffca]
0x12f37273ac69    69  ffd0                 call rax
0x12f37273ac6b    6b  488945a8             REX.W movq [rbp-0x58],rax
0x12f37273ac6f    6f  488955c8             REX.W movq [rbp-0x38],rdx
0x12f37273ac73    73  48894db8             REX.W movq [rbp-0x48],rcx
0x12f37273ac77    77  660f1f840000000000   nop
0x12f37273ac80    80  81ffbf000000         cmpl rdi,0xbf
0x12f37273ac86    86  0f85f3020000         jnz 0x12f37273af7f  <+0x37f>
0x12f37273ac8c    8c  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x12f37273ac90    90  0f861e030000         jna 0x12f37273afb4  <+0x3b4>
0x12f37273ac96    96  498bbd70b30000       REX.W movq rdi,[r13+0xb370]
0x12f37273ac9d    9d  33c0                 xorl rax,rax
0x12f37273ac9f    9f  33f6                 xorl rsi,rsi
0x12f37273aca1    a1  48bb005497da58710000 REX.W movq rbx,0x7158da975400
0x12f37273acab    ab  4c8bc0               REX.W movq r8,rax
0x12f37273acae    ae  49ba0000009058710000 REX.W movq r10,0x715890000000
0x12f37273acb8    b8  8b7f03               movl rdi,[rdi+0x3]
0x12f37273acbb    bb  c1ef09               shrl rdi, 9
0x12f37273acbe    be  c1e704               shll rdi, 4
0x12f37273acc1    c1  498b3c3a             REX.W movq rdi,[r10+rdi*1]
0x12f37273acc5    c5  ffd7                 call rdi
0x12f37273acc7    c7  33d2                 xorl rdx,rdx
0x12f37273acc9    c9  488b4db8             REX.W movq rcx,[rbp-0x48]
0x12f37273accd    cd  660f1f840000000000   nop
0x12f37273acd6    d6  660f1f840000000000   nop
0x12f37273acdf    df  660f1f840000000000   nop
0x12f37273ace8    e8  660f1f840000000000   nop
0x12f37273acf1    f1  660f1f840000000000   nop
0x12f37273acfa    fa  660f1f440000         nop
0x12f37273ad00   100  8b7da8               movl rdi,[rbp-0x58]
0x12f37273ad03   103  41baffffffff         movl r10,0xffffffff
0x12f37273ad09   109  493bfa               REX.W cmpq rdi,r10
0x12f37273ad0c   10c  761d                 jna 0x12f37273ad2b  <+0x12b>
0x12f37273ad0e   10e  bf01000000           movl rdi,0x1
0x12f37273ad13   113  4989e2               REX.W movq r10,rsp
0x12f37273ad16   116  4883ec08             REX.W subq rsp,0x8
0x12f37273ad1a   11a  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ad1e   11e  4c891424             REX.W movq [rsp],r10
0x12f37273ad22   122  488b050affffff       REX.W movq rax,[rip+0xffffff0a]
0x12f37273ad29   129  ffd0                 call rax
0x12f37273ad2b   12b  4c8d040f             REX.W leaq r8,[rdi+rcx*1]
0x12f37273ad2f   12f  4183e003             andl r8,0x3
0x12f37273ad33   133  458bc0               movl r8,r8
0x12f37273ad36   136  41baffffffff         movl r10,0xffffffff
0x12f37273ad3c   13c  4d3bc2               REX.W cmpq r8,r10
0x12f37273ad3f   13f  761d                 jna 0x12f37273ad5e  <+0x15e>
0x12f37273ad41   141  bf01000000           movl rdi,0x1
0x12f37273ad46   146  4989e2               REX.W movq r10,rsp
0x12f37273ad49   149  4883ec08             REX.W subq rsp,0x8
0x12f37273ad4d   14d  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ad51   151  4c891424             REX.W movq [rsp],r10
0x12f37273ad55   155  488b05d7feffff       REX.W movq rax,[rip+0xfffffed7]
0x12f37273ad5c   15c  ffd0                 call rax
0x12f37273ad5e   15e  4585c0               testl r8,r8
0x12f37273ad61   161  0f8580020000         jnz 0x12f37273afe7  <+0x3e7>
0x12f37273ad67   167  41b8b67a0000         movl r8,0x7ab6
0x12f37273ad6d   16d  4d8bd0               REX.W movq r10,r8
0x12f37273ad70   170  44871439             xchgl r10,[rcx+rdi*1]
0x12f37273ad74   174  41b9a1000000         movl r9,0xa1
0x12f37273ad7a   17a  4d8bd1               REX.W movq r10,r9
0x12f37273ad7d   17d  44871439             xchgl r10,[rcx+rdi*1]
0x12f37273ad81   181  83c201               addl rdx,0x1
0x12f37273ad84   184  41baffffffff         movl r10,0xffffffff
0x12f37273ad8a   18a  493bd2               REX.W cmpq rdx,r10
0x12f37273ad8d   18d  761d                 jna 0x12f37273adac  <+0x1ac>
0x12f37273ad8f   18f  bf01000000           movl rdi,0x1
0x12f37273ad94   194  4989e2               REX.W movq r10,rsp
0x12f37273ad97   197  4883ec08             REX.W subq rsp,0x8
0x12f37273ad9b   19b  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ad9f   19f  4c891424             REX.W movq [rsp],r10
0x12f37273ada3   1a3  488b0589feffff       REX.W movq rax,[rip+0xfffffe89]
0x12f37273adaa   1aa  ffd0                 call rax
0x12f37273adac   1ac  3b55c8               cmpl rdx,[rbp-0x38]
0x12f37273adaf   1af  0f83d9000000         jnc 0x12f37273ae8e  <+0x28e>
0x12f37273adb5   1b5  4d8bd0               REX.W movq r10,r8
0x12f37273adb8   1b8  44871439             xchgl r10,[rcx+rdi*1]
0x12f37273adbc   1bc  4d8bd1               REX.W movq r10,r9
0x12f37273adbf   1bf  44871439             xchgl r10,[rcx+rdi*1]
0x12f37273adc3   1c3  83c201               addl rdx,0x1
0x12f37273adc6   1c6  41baffffffff         movl r10,0xffffffff
0x12f37273adcc   1cc  493bd2               REX.W cmpq rdx,r10
0x12f37273adcf   1cf  761d                 jna 0x12f37273adee  <+0x1ee>
0x12f37273add1   1d1  bf01000000           movl rdi,0x1
0x12f37273add6   1d6  4989e2               REX.W movq r10,rsp
0x12f37273add9   1d9  4883ec08             REX.W subq rsp,0x8
0x12f37273addd   1dd  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ade1   1e1  4c891424             REX.W movq [rsp],r10
0x12f37273ade5   1e5  488b0547feffff       REX.W movq rax,[rip+0xfffffe47]
0x12f37273adec   1ec  ffd0                 call rax
0x12f37273adee   1ee  3b55c8               cmpl rdx,[rbp-0x38]
0x12f37273adf1   1f1  0f83d7000000         jnc 0x12f37273aece  <+0x2ce>
0x12f37273adf7   1f7  4d8bd0               REX.W movq r10,r8
0x12f37273adfa   1fa  44871439             xchgl r10,[rcx+rdi*1]
0x12f37273adfe   1fe  4d8bd1               REX.W movq r10,r9
0x12f37273ae01   201  44871439             xchgl r10,[rcx+rdi*1]
0x12f37273ae05   205  83c201               addl rdx,0x1
0x12f37273ae08   208  41baffffffff         movl r10,0xffffffff
0x12f37273ae0e   20e  493bd2               REX.W cmpq rdx,r10
0x12f37273ae11   211  761d                 jna 0x12f37273ae30  <+0x230>
0x12f37273ae13   213  bf01000000           movl rdi,0x1
0x12f37273ae18   218  4989e2               REX.W movq r10,rsp
0x12f37273ae1b   21b  4883ec08             REX.W subq rsp,0x8
0x12f37273ae1f   21f  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ae23   223  4c891424             REX.W movq [rsp],r10
0x12f37273ae27   227  488b0505feffff       REX.W movq rax,[rip+0xfffffe05]
0x12f37273ae2e   22e  ffd0                 call rax
0x12f37273ae30   230  3b55c8               cmpl rdx,[rbp-0x38]
0x12f37273ae33   233  0f83cf000000         jnc 0x12f37273af08  <+0x308>
0x12f37273ae39   239  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x12f37273ae3d   23d  0f1f00               nop
0x12f37273ae40   240  0f8678010000         jna 0x12f37273afbe  <+0x3be>
0x12f37273ae46   246  4d8bd0               REX.W movq r10,r8
0x12f37273ae49   249  44871439             xchgl r10,[rcx+rdi*1]
0x12f37273ae4d   24d  4d8bd1               REX.W movq r10,r9
0x12f37273ae50   250  44871439             xchgl r10,[rcx+rdi*1]
0x12f37273ae54   254  83c201               addl rdx,0x1
0x12f37273ae57   257  41baffffffff         movl r10,0xffffffff
0x12f37273ae5d   25d  493bd2               REX.W cmpq rdx,r10
0x12f37273ae60   260  761d                 jna 0x12f37273ae7f  <+0x27f>
0x12f37273ae62   262  bf01000000           movl rdi,0x1
0x12f37273ae67   267  4989e2               REX.W movq r10,rsp
0x12f37273ae6a   26a  4883ec08             REX.W subq rsp,0x8
0x12f37273ae6e   26e  4883e4f0             REX.W andq rsp,0xf0
0x12f37273ae72   272  4c891424             REX.W movq [rsp],r10
0x12f37273ae76   276  488b05b6fdffff       REX.W movq rax,[rip+0xfffffdb6]
0x12f37273ae7d   27d  ffd0                 call rax
0x12f37273ae7f   27f  90                   nop
0x12f37273ae80   280  3b55c8               cmpl rdx,[rbp-0x38]
0x12f37273ae83   283  0f8277feffff         jc 0x12f37273ad00  <+0x100>
0x12f37273ae89   289  e9b4000000           jmp 0x12f37273af42  <+0x342>
0x12f37273ae8e   28e  488d55d0             REX.W leaq rdx,[rbp-0x30]
0x12f37273ae92   292  c70200000000         movl [rdx],0x0
0x12f37273ae98   298  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x12f37273ae9f   29f  52                   push rdx
0x12f37273aea0   2a0  b801000000           movl rax,0x1
0x12f37273aea5   2a5  48bb905b97da58710000 REX.W movq rbx,0x7158da975b90
0x12f37273aeaf   2af  33f6                 xorl rsi,rsi
0x12f37273aeb1   2b1  4c8b15f8fdffff       REX.W movq r10,[rip+0xfffffdf8]
0x12f37273aeb8   2b8  8b4903               movl rcx,[rcx+0x3]
0x12f37273aebb   2bb  c1e909               shrl rcx, 9
0x12f37273aebe   2be  c1e104               shll rcx, 4
0x12f37273aec1   2c1  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x12f37273aec5   2c5  ffd1                 call rcx
0x12f37273aec7   2c7  33c0                 xorl rax,rax
0x12f37273aec9   2c9  488be5               REX.W movq rsp,rbp
0x12f37273aecc   2cc  5d                   pop rbp
0x12f37273aecd   2cd  c3                   retl
0x12f37273aece   2ce  488d55d8             REX.W leaq rdx,[rbp-0x28]
0x12f37273aed2   2d2  c70200000000         movl [rdx],0x0
0x12f37273aed8   2d8  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x12f37273aedf   2df  52                   push rdx
0x12f37273aee0   2e0  488b1dc0ffffff       REX.W movq rbx,[rip+0xffffffc0]
0x12f37273aee7   2e7  b801000000           movl rax,0x1
0x12f37273aeec   2ec  33f6                 xorl rsi,rsi
0x12f37273aeee   2ee  4c8b15bbfdffff       REX.W movq r10,[rip+0xfffffdbb]
0x12f37273aef5   2f5  8b4903               movl rcx,[rcx+0x3]
0x12f37273aef8   2f8  c1e909               shrl rcx, 9
0x12f37273aefb   2fb  c1e104               shll rcx, 4
0x12f37273aefe   2fe  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x12f37273af02   302  ffd1                 call rcx
0x12f37273af04   304  33c0                 xorl rax,rax
0x12f37273af06   306  ebc1                 jmp 0x12f37273aec9  <+0x2c9>
0x12f37273af08   308  488d55e0             REX.W leaq rdx,[rbp-0x20]
0x12f37273af0c   30c  c70200000000         movl [rdx],0x0
0x12f37273af12   312  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x12f37273af19   319  52                   push rdx
0x12f37273af1a   31a  488b1d86ffffff       REX.W movq rbx,[rip+0xffffff86]
0x12f37273af21   321  b801000000           movl rax,0x1
0x12f37273af26   326  33f6                 xorl rsi,rsi
0x12f37273af28   328  4c8b1581fdffff       REX.W movq r10,[rip+0xfffffd81]
0x12f37273af2f   32f  8b4903               movl rcx,[rcx+0x3]
0x12f37273af32   332  c1e909               shrl rcx, 9
0x12f37273af35   335  c1e104               shll rcx, 4
0x12f37273af38   338  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x12f37273af3c   33c  ffd1                 call rcx
0x12f37273af3e   33e  33c0                 xorl rax,rax
0x12f37273af40   340  eb87                 jmp 0x12f37273aec9  <+0x2c9>
0x12f37273af42   342  488d55e8             REX.W leaq rdx,[rbp-0x18]
0x12f37273af46   346  c70200000000         movl [rdx],0x0
0x12f37273af4c   34c  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x12f37273af53   353  52                   push rdx
0x12f37273af54   354  488b1d4cffffff       REX.W movq rbx,[rip+0xffffff4c]
0x12f37273af5b   35b  b801000000           movl rax,0x1
0x12f37273af60   360  33f6                 xorl rsi,rsi
0x12f37273af62   362  4c8b1547fdffff       REX.W movq r10,[rip+0xfffffd47]
0x12f37273af69   369  8b4903               movl rcx,[rcx+0x3]
0x12f37273af6c   36c  c1e909               shrl rcx, 9
0x12f37273af6f   36f  c1e104               shll rcx, 4
0x12f37273af72   372  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x12f37273af76   376  ffd1                 call rcx
0x12f37273af78   378  33c0                 xorl rax,rax
0x12f37273af7a   37a  488be5               REX.W movq rsp,rbp
0x12f37273af7d   37d  5d                   pop rbp
0x12f37273af7e   37e  c3                   retl
0x12f37273af7f   37f  498b9570b30000       REX.W movq rdx,[r13+0xb370]
0x12f37273af86   386  b994000000           movl rcx,0x94
0x12f37273af8b   38b  51                   push rcx
0x12f37273af8c   38c  48bb20060eda58710000 REX.W movq rbx,0x7158da0e0620
0x12f37273af96   396  b801000000           movl rax,0x1
0x12f37273af9b   39b  33f6                 xorl rsi,rsi
0x12f37273af9d   39d  4c8b150cfdffff       REX.W movq r10,[rip+0xfffffd0c]
0x12f37273afa4   3a4  8b5203               movl rdx,[rdx+0x3]
0x12f37273afa7   3a7  c1ea09               shrl rdx, 9
0x12f37273afaa   3aa  c1e204               shll rdx, 4
0x12f37273afad   3ad  498b1412             REX.W movq rdx,[r10+rdx*1]
0x12f37273afb1   3b1  ffd2                 call rdx
0x12f37273afb3   3b3  cc                   int3l
0x12f37273afb4   3b4  e897f3ffff           call 0x12f37273a350  (jump table)
0x12f37273afb9   3b9  e9d8fcffff           jmp 0x12f37273ac96  <+0x96>
0x12f37273afbe   3be  488955c0             REX.W movq [rbp-0x40],rdx
0x12f37273afc2   3c2  48897db0             REX.W movq [rbp-0x50],rdi
0x12f37273afc6   3c6  e885f3ffff           call 0x12f37273a350  (jump table)
0x12f37273afcb   3cb  8b55c0               movl rdx,[rbp-0x40]
0x12f37273afce   3ce  41b9a1000000         movl r9,0xa1
0x12f37273afd4   3d4  488b4db8             REX.W movq rcx,[rbp-0x48]
0x12f37273afd8   3d8  488b7db0             REX.W movq rdi,[rbp-0x50]
0x12f37273afdc   3dc  41b8b67a0000         movl r8,0x7ab6
0x12f37273afe2   3e2  e95ffeffff           jmp 0x12f37273ae46  <+0x246>
0x12f37273afe7   3e7  e8b4f0ffff           call 0x12f37273a0a0  (jump table)
0x12f37273afec   3ec  bf3c000000           movl rdi,0x3c
0x12f37273aff1   3f1  4989e2               REX.W movq r10,rsp
0x12f37273aff4   3f4  4883ec08             REX.W subq rsp,0x8
0x12f37273aff8   3f8  4883e4f0             REX.W andq rsp,0xf0
0x12f37273affc   3fc  4c891424             REX.W movq [rsp],r10
0x12f37273b000   400  488b052cfcffff       REX.W movq rax,[rip+0xfffffc2c]
0x12f37273b007   407  ffd0                 call rax
0x12f37273b009   409  90                   nop
0x12f37273b00a   40a  6690                 nop

Protected instructions:
 pc offset
       170         
       17d         
       1b8         
       1bf         
       1fa         
       201         
       249         
       250         

Source positions:
 pc offset  position
        9d         3
       167        15
       174        24
       1b5        15
       1bc        24
       1f7        15
       1fe        24
       246        15
       24d        24
       29f        45
       386         0
       3be         7
       3e7        15

Safepoints (stack slots = 13, entries = 1, byte size = 15)
0x12f37273acc7     c7  slots (sp->fp): 0000000000000

RelocInfo (size = 19)
0x12f37273ac33  external reference (0x7158d8e9b4d0)
0x12f37273aca3  external reference (0x7158da975400)
0x12f37273acb0  external reference (0x715890000000)
0x12f37273aea7  external reference (0x7158da975b90)
0x12f37273af8e  external reference (0x7158da0e0620)
0x12f37273afb5  wasm stub call  (0x12f37273a350)
0x12f37273afc7  wasm stub call  (0x12f37273a350)
0x12f37273afe8  wasm stub call  (0x12f37273a0a0)

--- End code ---
   1: ~+0(this=0x067e00841a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x067e00841a25 <JSGlobalProxy>) {
   2:  } -> 0x067e00000011 <undefined>
   1: } -> 0x067e00000011 <undefined>
   1: ~onmessage+0(this=0x067e00841a25 <JSGlobalProxy>, 0x067e0048900d <Object map = 0x67e00859b19>) {
   1: } -> 0
local decls count: 0
  +340  skip                : 1 bytes
wasm-decode 0x5767087700a4...0x5767087700ac (module+341, 8 bytes)
[]; [i32:s0x24]
  @1        #local.get                     | B1 |  i
[]; [i32:s0x24, i32:rax]
[DEBUG]AtomicOp called
  @3        #i32.atomic.load               | B1 |  i
[]; [i32:s0x24, i32:rdx]
  @7        #end                           |
  @7        #(implicit) return             |  | 
wasm-decode ok

--- WebAssembly code ---
name: wasm-function[3]
index: 3
kind: wasm function
compiler: Liftoff
Body (size = 448 = 408 + 40 padding)
Instructions (size = 392)
0x12f37273b040     0  55                   push rbp
0x12f37273b041     1  4889e5               REX.W movq rbp,rsp
0x12f37273b044     4  6a08                 push 0x8
0x12f37273b046     6  56                   push rsi
0x12f37273b047     7  4881ec18000000       REX.W subq rsp,0x18
0x12f37273b04e     e  8bc0                 movl rax,rax
0x12f37273b050    10  8b4eff               movl rcx,[rsi-0x1]
0x12f37273b053    13  4903ce               REX.W addq rcx,r14
0x12f37273b056    16  0fb74907             movzxwl rcx,[rcx+0x7]
0x12f37273b05a    1a  81f9bf000000         cmpl rcx,0xbf
0x12f37273b060    20  0f8420000000         jz 0x12f37273b086  <+0x46>
0x12f37273b066    26  bf4a000000           movl rdi,0x4a
0x12f37273b06b    2b  4989e2               REX.W movq r10,rsp
0x12f37273b06e    2e  4883ec08             REX.W subq rsp,0x8
0x12f37273b072    32  4883e4f0             REX.W andq rsp,0xf0
0x12f37273b076    36  4c891424             REX.W movq [rsp],r10
0x12f37273b07a    3a  48b8d0b4e9d858710000 REX.W movq rax,0x7158d8e9b4d0
0x12f37273b084    44  ffd0                 call rax
0x12f37273b086    46  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x12f37273b08a    4a  0f86d9000000         jna 0x12f37273b169  <+0x129>
0x12f37273b090    50  8945dc               movl [rbp-0x24],rax
0x12f37273b093    53  e848f3ffff           call 0x12f37273a3e0  (jump table)
0x12f37273b098    58  8b45dc               movl rax,[rbp-0x24]
0x12f37273b09b    5b  8bc8                 movl rcx,rax
0x12f37273b09d    5d  83e103               andl rcx,0x3
0x12f37273b0a0    60  85c9                 testl rcx,rcx
0x12f37273b0a2    62  0f85d1000000         jnz 0x12f37273b179  <+0x139>
0x12f37273b0a8    68  41baffffffff         movl r10,0xffffffff
0x12f37273b0ae    6e  493bc2               REX.W cmpq rax,r10
0x12f37273b0b1    71  761d                 jna 0x12f37273b0d0  <+0x90>
0x12f37273b0b3    73  bf01000000           movl rdi,0x1
0x12f37273b0b8    78  4989e2               REX.W movq r10,rsp
0x12f37273b0bb    7b  4883ec08             REX.W subq rsp,0x8
0x12f37273b0bf    7f  4883e4f0             REX.W andq rsp,0xf0
0x12f37273b0c3    83  4c891424             REX.W movq [rsp],r10
0x12f37273b0c7    87  488b05aeffffff       REX.W movq rax,[rip+0xffffffae]
0x12f37273b0ce    8e  ffd0                 call rax
0x12f37273b0d0    90  488b75f0             REX.W movq rsi,[rbp-0x10]
0x12f37273b0d4    94  488b561f             REX.W movq rdx,[rsi+0x1f]
0x12f37273b0d8    98  b903000000           movl rcx,0x3
0x12f37273b0dd    9d  48f7d9               REX.W negq rcx
0x12f37273b0e0    a0  4803ca               REX.W addq rcx,rdx
0x12f37273b0e3    a3  483bc1               REX.W cmpq rax,rcx
0x12f37273b0e6    a6  0f83af000000         jnc 0x12f37273b19b  <+0x15b>
0x12f37273b0ec    ac  488b4e17             REX.W movq rcx,[rsi+0x17]
0x12f37273b0f0    b0  41baffffffff         movl r10,0xffffffff
0x12f37273b0f6    b6  493bc2               REX.W cmpq rax,r10
0x12f37273b0f9    b9  761d                 jna 0x12f37273b118  <+0xd8>
0x12f37273b0fb    bb  bf01000000           movl rdi,0x1
0x12f37273b100    c0  4989e2               REX.W movq r10,rsp
0x12f37273b103    c3  4883ec08             REX.W subq rsp,0x8
0x12f37273b107    c7  4883e4f0             REX.W andq rsp,0xf0
0x12f37273b10b    cb  4c891424             REX.W movq [rsp],r10
0x12f37273b10f    cf  488b0566ffffff       REX.W movq rax,[rip+0xffffff66]
0x12f37273b116    d6  ffd0                 call rax
0x12f37273b118    d8  8b1401               movl rdx,[rcx+rax*1]
0x12f37273b11b    db  8955d8               movl [rbp-0x28],rdx
0x12f37273b11e    de  488d45d8             REX.W leaq rax,[rbp-0x28]
0x12f37273b122    e2  e8c9f2ffff           call 0x12f37273a3f0  (jump table)
0x12f37273b127    e7  4c8b55f0             REX.W movq r10,[rbp-0x10]
0x12f37273b12b    eb  4d8b525f             REX.W movq r10,[r10+0x5f]
0x12f37273b12f    ef  41816a0c23010000     subl [r10+0xc],0x123
0x12f37273b137    f7  0f8880000000         js 0x12f37273b1bd  <+0x17d>
0x12f37273b13d    fd  8b45d8               movl rax,[rbp-0x28]
0x12f37273b140   100  48837df808           REX.W cmpq [rbp-0x8],0x8
0x12f37273b145   105  741d                 jz 0x12f37273b164  <+0x124>
0x12f37273b147   107  bf30000000           movl rdi,0x30
0x12f37273b14c   10c  4989e2               REX.W movq r10,rsp
0x12f37273b14f   10f  4883ec08             REX.W subq rsp,0x8
0x12f37273b153   113  4883e4f0             REX.W andq rsp,0xf0
0x12f37273b157   117  4c891424             REX.W movq [rsp],r10
0x12f37273b15b   11b  488b051affffff       REX.W movq rax,[rip+0xffffff1a]
0x12f37273b162   122  ffd0                 call rax
0x12f37273b164   124  488be5               REX.W movq rsp,rbp
0x12f37273b167   127  5d                   pop rbp
0x12f37273b168   128  c3                   retl
0x12f37273b169   129  50                   push rax
0x12f37273b16a   12a  e8e1f1ffff           call 0x12f37273a350  (jump table)
0x12f37273b16f   12f  58                   pop rax
0x12f37273b170   130  488b75f0             REX.W movq rsi,[rbp-0x10]
0x12f37273b174   134  e917ffffff           jmp 0x12f37273b090  <+0x50>
0x12f37273b179   139  e822efffff           call 0x12f37273a0a0  (jump table)
0x12f37273b17e   13e  bf3c000000           movl rdi,0x3c
0x12f37273b183   143  4989e2               REX.W movq r10,rsp
0x12f37273b186   146  4883ec08             REX.W subq rsp,0x8
0x12f37273b18a   14a  4883e4f0             REX.W andq rsp,0xf0
0x12f37273b18e   14e  4c891424             REX.W movq [rsp],r10
0x12f37273b192   152  488b05e3feffff       REX.W movq rax,[rip+0xfffffee3]
0x12f37273b199   159  ffd0                 call rax
0x12f37273b19b   15b  e8f0eeffff           call 0x12f37273a090  (jump table)
0x12f37273b1a0   160  bf3c000000           movl rdi,0x3c
0x12f37273b1a5   165  4989e2               REX.W movq r10,rsp
0x12f37273b1a8   168  4883ec08             REX.W subq rsp,0x8
0x12f37273b1ac   16c  4883e4f0             REX.W andq rsp,0xf0
0x12f37273b1b0   170  4c891424             REX.W movq [rsp],r10
0x12f37273b1b4   174  488b05c1feffff       REX.W movq rax,[rip+0xfffffec1]
0x12f37273b1bb   17b  ffd0                 call rax
0x12f37273b1bd   17d  e8deefffff           call 0x12f37273a1a0  (jump table)
0x12f37273b1c2   182  e976ffffff           jmp 0x12f37273b13d  <+0xfd>
0x12f37273b1c7   187  90                   nop

Source positions:
 pc offset  position
        53         1
        e2         7
       12a         0  statement
       139         3  statement
       15b         3  statement
       17d         7  statement

Safepoints (stack slots = 8, entries = 1, byte size = 14)
0x12f37273b098     58  slots (sp->fp): 00000000

RelocInfo (size = 0)

--- End code ---
   1: ~wasm-function[3] {
   1: } -> 161
   1: } -> 0x067e00000011 <undefined>
   1: *wasm-function[6] {
   1: ~workerN.onmessage+0(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028c301 <Object map = 0x67e0009a58d>) {
Resolving worker message
   1: } -> 0x067e00000011 <undefined>
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 161
   1: } -> 0x067e00000011 <undefined>
   1: ~workerN.onmessage+0(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028c3b1 <Object map = 0x67e0009a58d>) {
Resolving worker message
   1: } -> 0x067e00000011 <undefined>
   1: ~+0(this=0x067e009c1a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x067e009c1a25 <JSGlobalProxy>) {
   2:  } -> 0x067e00000011 <undefined>
   1: } -> 0x067e00000011 <undefined>
   1: ~onmessage+0(this=0x067e009c1a25 <JSGlobalProxy>, 0x067e005c900d <Object map = 0x67e009d9b19>) {
   1: *wasm-function[6] {
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 161
   1: } -> 0x067e00000011 <undefined>
   1: ~workerN.onmessage+0(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028c461 <Object map = 0x67e0009a58d>) {
Resolving worker message
   1: } -> 0x067e00000011 <undefined>
   1: ~+0(this=0x067e00a01a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x067e00a01a25 <JSGlobalProxy>) {
   2:  } -> 0x067e00000011 <undefined>
   1: } -> 0x067e00000011 <undefined>
   1: ~onmessage+0(this=0x067e00a01a25 <JSGlobalProxy>, 0x067e0070900d <Object map = 0x67e00a19b19>) {
   1: *wasm-function[6] {
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 161
   1: } -> 0x067e00000011 <undefined>
   1: ~workerN.onmessage+0(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028c511 <Object map = 0x67e0009a58d>) {
Resolving worker message
   1: } -> 0x067e00000011 <undefined>
   1: ~+0(this=0x067e00a41a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x067e00a41a25 <JSGlobalProxy>) {
   2:  } -> 0x067e00000011 <undefined>
   1: } -> 0x067e00000011 <undefined>
   1: ~onmessage+0(this=0x067e00a41a25 <JSGlobalProxy>, 0x067e0088900d <Object map = 0x67e00a59b19>) {
   1: *wasm-function[6] {
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 161
   1: } -> 0x067e00000011 <undefined>
   1: ~workerN.onmessage+0(this=0x067e00081a25 <JSGlobalProxy>, 0x067e0028c5c1 <Object map = 0x67e0009a58d>) {
Resolving worker message
   1: } -> 0x067e00000011 <undefined>
   2:  } -> 0x067e00289b4d <Promise map = 0x67e000899ad>
##Benchmark Start##
Worker 0 Value: 161 Time (ms): 111.13900000000001
Worker 1 Value: 161 Time (ms): 72.63999999999999
Worker 2 Value: 161 Time (ms): 72.27999999999997
Worker 3 Value: 161 Time (ms): 72.33400000000006
Worker 4 Value: 161 Time (ms): 59.799999999999955
   1: ~wasm-function[3] {
   1: } -> 161
Final total count: 161
##Benchmark End##
   2:  } -> 0x067e00289a85 <Promise map = 0x67e000899ad>
   1: ~+0(this=0x067e00081a25 <JSGlobalProxy>) {
Finished.
   1: } -> 0x067e00000011 <undefined>
  +0  module header       : 8 bytes
  +8  uint8_t             : 01 = 1
  +9  section size        : 10 = 16
  +10  section payload     : 16 bytes
  +26  uint8_t             : 02 = 2
  +27  section size        : 10 = 16
  +28  section payload     : 16 bytes
  +44  uint8_t             : 03 = 3
  +45  section size        : 0b = 11
  +46  section payload     : 11 bytes
  +57  uint8_t             : 07 = 7
  +58  section size        : ca 01 = 202
  +60  section payload     : 202 bytes
  +262  uint8_t             : 0a = 10
  +263  section size        : e8 02 = 360
