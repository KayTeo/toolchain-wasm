   1: ~+0(this=0x287800081a25 <JSGlobalProxy>) {
   2:  ~+0(this=0x287800081a25 <JSGlobalProxy>) {
   2:  } -> 0x287800000011 <undefined>
00 61 73 6d 01 00 00 00 01 Section: Type
Decode Section 0x617eac64df5a - 0x617eac64df66
DecodeType[0] module+1
60   +13  value type          : 1 bytes
  +15  value type          : 1 bytes
DecodeType[1] module+6
60   +18  value type          : 1 bytes
  +19  value type          : 1 bytes
  +21  value type          : 1 bytes
  +10  skip                : 12 bytes
02 Section: Import
Decode Section 0x617eac64df68 - 0x617eac64df78
DecodeImportTable[0] module+1
  +26  module name         : 3 bytes
  +30  field name          : 6 bytes
02   +37  memory limits flags : 03 = 3
  +24  skip                : 16 bytes
03 Section: Function
Decode Section 0x617eac64df7a - 0x617eac64df83
  +43  signature index     : 00 = 0
  +44  signature index     : 00 = 0
  +45  signature index     : 01 = 1
  +46  signature index     : 00 = 0
  +47  signature index     : 01 = 1
  +48  signature index     : 00 = 0
  +49  signature index     : 01 = 1
  +50  signature index     : 01 = 1
  +42  skip                : 9 bytes
07 Section: Export
Decode Section 0x617eac64df86 - 0x617eac64e024
DecodeExportTable[0] module+1
  +56  field name          : 16 bytes
00 DecodeExportTable[1] module+20
  +75  field name          : 23 bytes
00 DecodeExportTable[2] module+46
  +101  field name          : 19 bytes
00 DecodeExportTable[3] module+68
  +123  field name          : 8 bytes
00 DecodeExportTable[4] module+79
  +134  field name          : 10 bytes
00 DecodeExportTable[5] module+92
  +147  field name          : 21 bytes
00 DecodeExportTable[6] module+116
  +171  field name          : 12 bytes
00 DecodeExportTable[7] module+131
  +186  field name          : 24 bytes
00   +54  skip                : 158 bytes
0a Section: Code
Decode Section 0x617eac64e027 - 0x617eac64e109
  +217  function body       : 20 bytes
  +238  function body       : 10 bytes
  +249  function body       : 40 bytes
  +290  function body       : 8 bytes
  +299  function body       : 50 bytes
  +350  function body       : 14 bytes
  +365  function body       : 37 bytes
  +403  function body       : 38 bytes
  +215  skip                : 226 bytes
  +0  module header       : 8 bytes
  +8  uint8_t             : 01 = 1
  +9  section size        : 0c = 12
  +10  section payload     : 12 bytes
  +22  uint8_t             : 02 = 2
  +23  section size        : 10 = 16
  +24  section payload     : 16 bytes
  +40  uint8_t             : 03 = 3
  +41  section size        : 09 = 9
  +42  section payload     : 9 bytes
  +51  uint8_t             : 07 = 7
  +52  section size        : 9e 01 = 158
  +54  section payload     : 158 bytes
  +212  uint8_t             : 0a = 10
  +213  section size        : e2 01 = 226
local decls count: 0
local decls count: 1
local decls count: 0
local decls count: 0
  +238  skip                : 1 bytes
  +290  skip                : 1 bytes
  +217  skip                : 1 bytes
wasm-decode 0x617eac64e03e...0x617eac64e048 (module+239, 10 bytes)
wasm-decode 0x617eac64e029...0x617eac64e03d (module+218, 20 bytes)
  +249  skip                : 3 bytes
wasm-decode 0x617eac64e072...0x617eac64e07a (module+291, 8 bytes)
wasm-decode 0x617eac64e049...0x617eac64e071 (module+252, 40 bytes)
  @1        #local.get                     | B1 |  i
  @3        #i32.const                     | B1 |  i
  @1        #local.get                     | B1 |  i
  @1        #local.get                     | B1 |  i
  @3        #i32.const                     | B1 |  i i
  @3        #local.get                     | B1 |  i i
  @5        #local.set                     | B1 | 
  @5        #i32.load                      | B1 |  i i
  @8        #i32.const                     | B1 |  i i i
  @5        #i32.atomic.rmw.add            | B1 |  i
  @3        #i32.atomic.load               | B1 |  i
  @10       #i32.add                       | B1 |  i i
  @9        #end                           |
  @9        #(implicit) return             |  | 
  @7        #end                           |
  @7        #(implicit) return             |  | 
wasm-decode ok

local decls count: 1
  +299  skip                : 3 bytes
wasm-decode 0x617eac64e07b...0x617eac64e0ad (module+302, 50 bytes)
  @3        #i32.const                     | B1 |  i
  @5        #local.set                     | B1 | 
  @7        #loop                          | B1L0 | 
  @9        #local.get                     | B1L0 |  i
  @11       #i32.atomic.load               | B1L0 |  i
  @15       #local.set                     | B1L0 | 
  @17       #local.get                     | B1L0 |  i
  @19       #i32.const                     | B1L0 |  i i
  @21       #i32.add                       | B1L0 |  i
  @22       #local.set                     | B1L0 | 
  @24       #local.get                     | B1L0 |  i
  @26       #local.get                     | B1L0 |  i i
  @28       #i32.atomic.store              | B1L0 | 
  @32       #local.get                     | B1L0 |  i
  @34       #i32.const                     | B1L0 |  i i
  @36       #i32.add                       | B1L0 |  i
  @37       #local.set                     | B1L0 | 
  @39       #local.get                     | B1L0 |  i
  @41       #local.get                     | B1L0 |  i i
  @43       #i32.lt_u                      | B1L0 |  i
  @44       #br_if                         | B1L0 | 
  @46       #end                           | B1 | 
  @47       #local.get                     | B1 |  i
  @49       #end                           |
  @49       #(implicit) return             |  | 
wasm-decode ok

local decls count: 1
  +350  skip                : 3 bytes
wasm-decode 0x617eac64e0ae...0x617eac64e0bc (module+353, 14 bytes)
  @3        #local.get                     | B1 |  i
  @5        #i32.const                     | B1 |  i i
  @7        #i32.atomic.store              | B1 | 
  @11       #local.get                     | B1 |  i
  @13       #end                           |
  @13       #(implicit) return             |  | 
wasm-decode ok

local decls count: 1
  +365  skip                : 3 bytes
wasm-decode 0x617eac64e0bd...0x617eac64e0e2 (module+368, 37 bytes)
  @3        #i32.const                     | B1 |  i
  @5        #local.set                     | B1 | 
  @7        #loop                          | B1L0 | 
  @9        #local.get                     | B1L0 |  i
wasm-decode ok

  @11       #i32.const                     | B1L0 |  i i
  @11       #i32.store                     | B1 | 
  @15       #i32.atomic.store              | B1L0 | 
  @7        #loop                          | B1L0 | 
  @19       #local.get                     | B1L0 |  i
local decls count: 1
  @21       #i32.const                     | B1L0 |  i i
  @14       #local.get                     | B1 |  i
  @9        #local.get                     | B1L0 |  i
  +403  skip                : 3 bytes
wasm-decode 0x617eac64e0e3...0x617eac64e109 (module+406, 38 bytes)
  @23       #i32.add                       | B1L0 |  i
  @11       #i32.const                     | B1L0 |  i i
  @16       #i32.load                      | B1 |  i
  @24       #local.set                     | B1L0 | 
  @3        #i32.const                     | B1 |  i
  @26       #local.get                     | B1L0 |  i
  @19       #end                           |
  @19       #(implicit) return             |  | 
wasm-decode ok

  @28       #local.get                     | B1L0 |  i i
  @13       #i32.atomic.rmw.add            | B1L0 |  i
  @5        #local.set                     | B1 | 
  @30       #i32.lt_u                      | B1L0 |  i
  @17       #drop                          | B1L0 | 
  @31       #br_if                         | B1L0 | 
  @7        #loop                          | B1L0 | 
  @18       #local.get                     | B1L0 |  i
  @33       #end                           | B1 | 
  @20       #i32.const                     | B1L0 |  i i
  @34       #local.get                     | B1 |  i
  @9        #local.get                     | B1L0 |  i
  @36       #end                           |
  @36       #(implicit) return             |  | 
wasm-decode ok

  @22       #i32.add                       | B1L0 |  i
  @11       #local.get                     | B1L0 |  i i
  @23       #local.set                     | B1L0 | 
  @25       #local.get                     | B1L0 |  i
  @13       #i32.const                     | B1L0 |  i i i
  @27       #local.get                     | B1L0 |  i i
  @15       #i32.add                       | B1L0 |  i i
  @29       #i32.lt_u                      | B1L0 |  i
  @30       #br_if                         | B1L0 | 
  @32       #end                           | B1 | 
  @33       #local.get                     | B1 |  i
  @16       #i32.atomic.store              | B1L0 | 
  @35       #i32.atomic.load               | B1 |  i
  @39       #end                           |
  @39       #(implicit) return             |  | 
wasm-decode ok

  @20       #local.get                     | B1L0 |  i
  @22       #i32.const                     | B1L0 |  i i
  @24       #i32.add                       | B1L0 |  i
  @25       #local.set                     | B1L0 | 
  @27       #local.get                     | B1L0 |  i
  @29       #local.get                     | B1L0 |  i i
  @31       #i32.lt_u                      | B1L0 |  i
  @32       #br_if                         | B1L0 | 
  @34       #end                           | B1 | 
  @35       #local.get                     | B1 |  i
  @37       #end                           |
  @37       #(implicit) return             |  | 
wasm-decode ok

  +0  module header       : 8 bytes
  +8  uint8_t             : 01 = 1
  +9  section size        : 0c = 12
  +10  section payload     : 12 bytes
  +22  uint8_t             : 02 = 2
  +23  section size        : 10 = 16
  +24  section payload     : 16 bytes
  +40  uint8_t             : 03 = 3
  +41  section size        : 09 = 9
  +42  section payload     : 9 bytes
  +51  uint8_t             : 07 = 7
  +52  section size        : 9e 01 = 158
  +54  section payload     : 158 bytes
  +212  uint8_t             : 0a = 10
  +213  section size        : e2 01 = 226
   2:  ~main+15(this=0x287800081a25 <JSGlobalProxy>) {
   3:   ~runWorkers+15(this=0x287800081a25 <JSGlobalProxy>, 0x287800289a11 <Module map = 0x28780008fbb5>, 0x287800099e0d <Memory map = 0x28780008ff39>, 0x287800099c5d <JSFunction workerCode (sfi = 0x2878000999e9)>, 5) {
   1: ~+0(this=0x287800441a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x287800441a25 <JSGlobalProxy>) {
   2:  } -> 0x287800000011 <undefined>
   1: } -> 0x287800000011 <undefined>
   4:    ~sendMessageToWorker+24(this=0x287800081a25 <JSGlobalProxy>, 0x28780028b5e1 <Object map = 0x28780009a1ed>, 0x287800289be1 <Worker map = 0x287800095ea9>) {
   6:      ~+9(this=0x287800081a25 <JSGlobalProxy>, 0x28780028b729 <JSFunction (sfi = 0x2878002511e5)>, 0x28780028b745 <JSFunction (sfi = 0x287800251215)>) {
   6:      } -> 0x287800000011 <undefined>
   4:    } -> 0x28780028b69d <Promise map = 0x2878000899ad>
   4:    ~sendMessageToWorker+24(this=0x287800081a25 <JSGlobalProxy>, 0x28780028b835 <Object map = 0x28780009a1ed>, 0x28780028a151 <Worker map = 0x287800095ea9>) {
   6:      ~+9(this=0x287800081a25 <JSGlobalProxy>, 0x28780028b92d <JSFunction (sfi = 0x2878002511e5)>, 0x28780028b949 <JSFunction (sfi = 0x287800251215)>) {
   6:      } -> 0x287800000011 <undefined>
   4:    } -> 0x28780028b8a1 <Promise map = 0x2878000899ad>
   1: ~onmessage+0(this=0x287800441a25 <JSGlobalProxy>, 0x2878000c900d <Object map = 0x287800459b19>) {
   4:    ~sendMessageToWorker+24(this=0x287800081a25 <JSGlobalProxy>, 0x28780028b9a5 <Object map = 0x28780009a1ed>, 0x28780028a675 <Worker map = 0x287800095ea9>) {
   6:      ~+9(this=0x287800081a25 <JSGlobalProxy>, 0x28780028ba9d <JSFunction (sfi = 0x2878002511e5)>, 0x28780028bab9 <JSFunction (sfi = 0x287800251215)>) {
   6:      } -> 0x287800000011 <undefined>
   4:    } -> 0x28780028ba11 <Promise map = 0x2878000899ad>
   4:    ~sendMessageToWorker+24(this=0x287800081a25 <JSGlobalProxy>, 0x28780028bb15 <Object map = 0x28780009a1ed>, 0x28780028ab99 <Worker map = 0x287800095ea9>) {
   6:      ~+9(this=0x287800081a25 <JSGlobalProxy>, 0x28780028bc0d <JSFunction (sfi = 0x2878002511e5)>, 0x28780028bc29 <JSFunction (sfi = 0x287800251215)>) {
   6:      } -> 0x287800000011 <undefined>
   4:    } -> 0x28780028bb81 <Promise map = 0x2878000899ad>
local decls count: 1
  +365  skip                : 3 bytes
wasm-decode 0x617eac64e0bd...0x617eac64e0e2 (module+368, 37 bytes)
[]; [i32:s0x24, i32:s0x28, i32:c0, i32:c0]
  @3        #i32.const                     | B1 |  i
[]; [i32:s0x24, i32:s0x28, i32:c0, i32:c0, i32:c0]
  @5        #local.set                     | B1 | 
[]; [i32:s0x24, i32:s0x28, i32:c0, i32:c0]
  @7        #loop                          | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @9        #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @11       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c31415]
[DEBUG]AtomicOp called
[DEBUG] AtomicStore emitting xchgl
  @15       #i32.atomic.store              | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]
  @19       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @21       #i32.const                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax, i32:c1]
  @23       #i32.add                       | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30, i32:rax]
  @24       #local.set                     | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30]
  @26       #local.get                     | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30, i32:rax]
  @28       #local.get                     | B1L0 |  i i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30, i32:rax, i32:rcx]
  @30       #i32.lt_u                      | B1L0 |  i
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rax, i32:s0x30, i32:rax, i32:rcx]
  @31       #br_if                         | B1L0 | 
[]; [i32:s0x24, i32:s0x28, i32:s0x2c, i32:s0x30]; [i32:s0x24, i32:s0x28, i32:rbx, i32:s0x30]
  @33       #end                           | B1 | 
[]; [i32:s0x24, i32:s0x28, i32:rbx, i32:s0x30]
  @34       #local.get                     | B1 |  i
[]; [i32:s0x24, i32:s0x28, i32:rbx, i32:s0x30, i32:rax]
  @36       #end                           |
  @36       #(implicit) return             |  | 
wasm-decode ok

  +0  module header       : 8 bytes
01   +10  skip                : 12 bytes
02   +24  skip                : 16 bytes
03   +42  skip                : 9 bytes
07   +54  skip                : 158 bytes
0a   +215  skip                : 226 bytes
--- WebAssembly code ---
name: wasm-function[6]
index: 6
kind: wasm function
compiler: Liftoff
Body (size = 512 = 504 + 8 padding)
Instructions (size = 488)
0x32a58e49f900     0  55                   push rbp
0x32a58e49f901     1  4889e5               REX.W movq rbp,rsp
0x32a58e49f904     4  6a08                 push 0x8
0x32a58e49f906     6  56                   push rsi
0x32a58e49f907     7  4881ec28000000       REX.W subq rsp,0x28
0x32a58e49f90e     e  8bc0                 movl rax,rax
0x32a58e49f910    10  8bd2                 movl rdx,rdx
0x32a58e49f912    12  8b4eff               movl rcx,[rsi-0x1]
0x32a58e49f915    15  4903ce               REX.W addq rcx,r14
0x32a58e49f918    18  0fb74907             movzxwl rcx,[rcx+0x7]
0x32a58e49f91c    1c  81f9bf000000         cmpl rcx,0xbf
0x32a58e49f922    22  0f8420000000         jz 0x32a58e49f948  <+0x48>
0x32a58e49f928    28  bf4a000000           movl rdi,0x4a
0x32a58e49f92d    2d  4989e2               REX.W movq r10,rsp
0x32a58e49f930    30  4883ec08             REX.W subq rsp,0x8
0x32a58e49f934    34  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49f938    38  4c891424             REX.W movq [rsp],r10
0x32a58e49f93c    3c  48b8d0b4893156700000 REX.W movq rax,0x70563189b4d0
0x32a58e49f946    46  ffd0                 call rax
0x32a58e49f948    48  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x32a58e49f94c    4c  0f8622010000         jna 0x32a58e49fa74  <+0x174>
0x32a58e49f952    52  8945dc               movl [rbp-0x24],rax
0x32a58e49f955    55  8955d8               movl [rbp-0x28],rdx
0x32a58e49f958    58  e843faffff           call 0x32a58e49f3a0  (jump table)
0x32a58e49f95d    5d  c745d400000000       movl [rbp-0x2c],0x0
0x32a58e49f964    64  c745d000000000       movl [rbp-0x30],0x0
0x32a58e49f96b    6b  8b45dc               movl rax,[rbp-0x24]
0x32a58e49f96e    6e  b9b77a0000           movl rcx,0x7ab7
0x32a58e49f973    73  8bd0                 movl rdx,rax
0x32a58e49f975    75  83e203               andl rdx,0x3
0x32a58e49f978    78  85d2                 testl rdx,rdx
0x32a58e49f97a    7a  0f8506010000         jnz 0x32a58e49fa86  <+0x186>
0x32a58e49f980    80  41baffffffff         movl r10,0xffffffff
0x32a58e49f986    86  493bc2               REX.W cmpq rax,r10
0x32a58e49f989    89  761d                 jna 0x32a58e49f9a8  <+0xa8>
0x32a58e49f98b    8b  bf01000000           movl rdi,0x1
0x32a58e49f990    90  4989e2               REX.W movq r10,rsp
0x32a58e49f993    93  4883ec08             REX.W subq rsp,0x8
0x32a58e49f997    97  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49f99b    9b  4c891424             REX.W movq [rsp],r10
0x32a58e49f99f    9f  488b0598ffffff       REX.W movq rax,[rip+0xffffff98]
0x32a58e49f9a6    a6  ffd0                 call rax
0x32a58e49f9a8    a8  488b75f0             REX.W movq rsi,[rbp-0x10]
0x32a58e49f9ac    ac  488b5e1f             REX.W movq rbx,[rsi+0x1f]
0x32a58e49f9b0    b0  ba03000000           movl rdx,0x3
0x32a58e49f9b5    b5  48f7da               REX.W negq rdx
0x32a58e49f9b8    b8  4803d3               REX.W addq rdx,rbx
0x32a58e49f9bb    bb  483bc2               REX.W cmpq rax,rdx
0x32a58e49f9be    be  0f83e4000000         jnc 0x32a58e49faa8  <+0x1a8>
0x32a58e49f9c4    c4  488b5617             REX.W movq rdx,[rsi+0x17]
0x32a58e49f9c8    c8  41baffffffff         movl r10,0xffffffff
0x32a58e49f9ce    ce  493bc2               REX.W cmpq rax,r10
0x32a58e49f9d1    d1  761d                 jna 0x32a58e49f9f0  <+0xf0>
0x32a58e49f9d3    d3  bf01000000           movl rdi,0x1
0x32a58e49f9d8    d8  4989e2               REX.W movq r10,rsp
0x32a58e49f9db    db  4883ec08             REX.W subq rsp,0x8
0x32a58e49f9df    df  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49f9e3    e3  4c891424             REX.W movq [rsp],r10
0x32a58e49f9e7    e7  488b0550ffffff       REX.W movq rax,[rip+0xffffff50]
0x32a58e49f9ee    ee  ffd0                 call rax
0x32a58e49f9f0    f0  870c02               xchgl rcx,[rdx+rax*1]
0x32a58e49f9f3    f3  8b45d4               movl rax,[rbp-0x2c]
0x32a58e49f9f6    f6  83c001               addl rax,0x1
0x32a58e49f9f9    f9  8b4dd8               movl rcx,[rbp-0x28]
0x32a58e49f9fc    fc  8bd8                 movl rbx,rax
0x32a58e49f9fe    fe  3bc1                 cmpl rax,rcx
0x32a58e49fa00   100  0f831a000000         jnc 0x32a58e49fa20  <+0x120>
0x32a58e49fa06   106  4c8b565f             REX.W movq r10,[rsi+0x5f]
0x32a58e49fa0a   10a  41816a18af000000     subl [r10+0x18],0xaf
0x32a58e49fa12   112  0f88b2000000         js 0x32a58e49faca  <+0x1ca>
0x32a58e49fa18   118  895dd4               movl [rbp-0x2c],rbx
0x32a58e49fa1b   11b  e94bffffff           jmp 0x32a58e49f96b  <+0x6b>
0x32a58e49fa20   120  8b45d0               movl rax,[rbp-0x30]
0x32a58e49fa23   123  895dd4               movl [rbp-0x2c],rbx
0x32a58e49fa26   126  8945cc               movl [rbp-0x34],rax
0x32a58e49fa29   129  488d45cc             REX.W leaq rax,[rbp-0x34]
0x32a58e49fa2d   12d  e87ef9ffff           call 0x32a58e49f3b0  (jump table)
0x32a58e49fa32   132  4c8b55f0             REX.W movq r10,[rbp-0x10]
0x32a58e49fa36   136  4d8b525f             REX.W movq r10,[r10+0x5f]
0x32a58e49fa3a   13a  41816a186e010000     subl [r10+0x18],0x16e
0x32a58e49fa42   142  0f8894000000         js 0x32a58e49fadc  <+0x1dc>
0x32a58e49fa48   148  8b45cc               movl rax,[rbp-0x34]
0x32a58e49fa4b   14b  48837df808           REX.W cmpq [rbp-0x8],0x8
0x32a58e49fa50   150  741d                 jz 0x32a58e49fa6f  <+0x16f>
0x32a58e49fa52   152  bf30000000           movl rdi,0x30
0x32a58e49fa57   157  4989e2               REX.W movq r10,rsp
   4:    0x32a58e49fa5a   15a  4883ec08             REX.W subq rsp,0x8
0x32a58e49fa5e   15e  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49fa62   162  4c891424             REX.W movq [rsp],r10
0x32a58e49fa66   166  488b05d1feffff       REX.W movq rax,[rip+0xfffffed1]
~0x32a58e49fa6d   16d  ffd0                 call rax
0x32a58e49fa6f   16f  488be5               REX.W movq rsp,rbp
0x32a58e49fa72   172  5d                   pop rbp
0x32a58e49fa73   173  c3                   retl
0x32a58e49fa74   174  50                   push rax
0x32a58e49fa75   175  52                   push rdx
0x32a58e49fa76   176  e895f8ffff           call 0x32a58e49f310  (jump table)
0x32a58e49fa7b   17b  5a                   pop rdx
0x32a58e49fa7c   17c  58                   pop rax
0x32a58e49fa7d   17d  488b75f0             REX.W movq rsi,[rbp-0x10]
sendMessageToWorker+24(this=0x32a58e49fa81   181  e9ccfeffff           jmp 0x32a58e49f952  <+0x52>
0x287800081a25 0x32a58e49fa86   186  e8d5f5ffff           call 0x32a58e49f060  (jump table)
0x32a58e49fa8b   18b  bf3c000000           movl rdi,0x3c
<JSGlobalProxy>0x32a58e49fa90   190  4989e2               REX.W movq r10,rsp
0x32a58e49fa93   193  4883ec08             REX.W subq rsp,0x8
, 0x32a58e49fa97   197  4883e4f0             REX.W andq rsp,0xf0
0x28780028bc85 0x32a58e49fa9b   19b  4c891424             REX.W movq [rsp],r10
0x32a58e49fa9f   19f  488b0598feffff       REX.W movq rax,[rip+0xfffffe98]
0x32a58e49faa6   1a6  ffd0                 call rax
0x32a58e49faa8   1a8  e8a3f5ffff           call 0x32a58e49f050  (jump table)<Object map = 0x28780009a1ed>
, 0x32a58e49faad   1ad  bf3c000000           movl rdi,0x3c
0x28780028b0bd 0x32a58e49fab2   1b2  4989e2               REX.W movq r10,rsp
0x32a58e49fab5   1b5  4883ec08             REX.W subq rsp,0x8
0x32a58e49fab9   1b9  4883e4f0             REX.W andq rsp,0xf0
<Worker map = 0x287800095ea9>) {
0x32a58e49fabd   1bd  4c891424             REX.W movq [rsp],r10
0x32a58e49fac1   1c1  488b0576feffff       REX.W movq rax,[rip+0xfffffe76]
0x32a58e49fac8   1c8  ffd0                 call rax
0x32a58e49faca   1ca  52                   push rdx
0x32a58e49facb   1cb  53                   push rbx
0x32a58e49facc   1cc  e88ff6ffff           call 0x32a58e49f160  (jump table)
0x32a58e49fad1   1d1  5b                   pop rbx
0x32a58e49fad2   1d2  5a                   pop rdx
0x32a58e49fad3   1d3  488b75f0             REX.W movq rsi,[rbp-0x10]
0x32a58e49fad7   1d7  e93cffffff           jmp 0x32a58e49fa18  <+0x118>
0x32a58e49fadc   1dc  e87ff6ffff           call 0x32a58e49f160  (jump table)
0x32a58e49fae1   1e1  e962ffffff           jmp 0x32a58e49fa48  <+0x148>
0x32a58e49fae6   1e6  6690                 nop

Source positions:
 pc offset  position
        58         3
       12d        36
       176         0  statement
       186        15  statement
       1a8        15  statement
       1cc        31  statement
       1dc        36  statement

Safepoints (stack slots = 11, entries = 1, byte size = 15)
0x32a58e49f95d     5d  slots (sp->fp): 00000000000

RelocInfo (size = 0)

--- End code ---
   6:      ~+9(this=0x287800081a25 <JSGlobalProxy>, 0x28780028bd7d    1: <JSFunction (sfi = 0x2878002511e5)>, 0x28780028bd99 ~wasm-function[6] {
<JSFunction (sfi = 0x287800251215)>) {
   6:      } -> 0x287800000011 <undefined>
   4:    } -> 0x28780028bcf1 <Promise map = 0x2878000899ad>
   1: } -> 0x28780028c165 <Promise map = 0x2878000899ad>
local decls count: 1
  +365  skip                : 3 bytes
wasm-decode 0x617eac64e0bd...0x617eac64e0e2 (module+368, 37 bytes)
  @3        #i32.const                     | B1 |  i
  @5        #local.set                     | B1 | 
  @7        #loop                          | B1L0 | 
  @9        #local.get                     | B1L0 |  i
  @11       #i32.const                     | B1L0 |  i i
  @15       #i32.atomic.store              | B1L0 | 
  @19       #local.get                     | B1L0 |  i
  @21       #i32.const                     | B1L0 |  i i
  @23       #i32.add                       | B1L0 |  i
  @24       #local.set                     | B1L0 | 
  @26       #local.get                     | B1L0 |  i
  @28       #local.get                     | B1L0 |  i i
  @30       #i32.lt_u                      | B1L0 |  i
  @31       #br_if                         | B1L0 | 
  @33       #end                           | B1 | 
  @34       #local.get                     | B1 |  i
  @36       #end                           |
  @36       #(implicit) return             |  | 
wasm-decode ok

--- WebAssembly code ---
name: wasm-function[6]
index: 6
kind: wasm function
compiler: TurboFan
Body (size = 1024 = 1020 + 4 padding)
Instructions (size = 1004)
0x32a58e49fb00     0  55                   push rbp
0x32a58e49fb01     1  4889e5               REX.W movq rbp,rsp
0x32a58e49fb04     4  6a08                 push 0x8
0x32a58e49fb06     6  56                   push rsi
0x32a58e49fb07     7  4883ec48             REX.W subq rsp,0x48
0x32a58e49fb0b     b  488b4e17             REX.W movq rcx,[rsi+0x17]
0x32a58e49fb0f     f  8b7eff               movl rdi,[rsi-0x1]
0x32a58e49fb12    12  41baffffffff         movl r10,0xffffffff
0x32a58e49fb18    18  493bfa               REX.W cmpq rdi,r10
0x32a58e49fb1b    1b  7620                 jna 0x32a58e49fb3d  <+0x3d>
0x32a58e49fb1d    1d  bf01000000           movl rdi,0x1
0x32a58e49fb22    22  4989e2               REX.W movq r10,rsp
0x32a58e49fb25    25  4883ec08             REX.W subq rsp,0x8
0x32a58e49fb29    29  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49fb2d    2d  4c891424             REX.W movq [rsp],r10
0x32a58e49fb31    31  48b8d0b4893156700000 REX.W movq rax,0x70563189b4d0
0x32a58e49fb3b    3b  ffd0                 call rax
0x32a58e49fb3d    3d  410fb77c3e07         movzxwl rdi,[r14+rdi*1+0x7]
0x32a58e49fb43    43  41baffffffff         movl r10,0xffffffff
0x32a58e49fb49    49  493bfa               REX.W cmpq rdi,r10
0x32a58e49fb4c    4c  761d                 jna 0x32a58e49fb6b  <+0x6b>
0x32a58e49fb4e    4e  bf01000000           movl rdi,0x1
0x32a58e49fb53    53  4989e2               REX.W movq r10,rsp
0x32a58e49fb56    56  4883ec08             REX.W subq rsp,0x8
0x32a58e49fb5a    5a  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49fb5e    5e  4c891424             REX.W movq [rsp],r10
0x32a58e49fb62    62  488b05caffffff       REX.W movq rax,[rip+0xffffffca]
0x32a58e49fb69    69  ffd0                 call rax
0x32a58e49fb6b    6b  488945a8             REX.W movq [rbp-0x58],rax
0x32a58e49fb6f    6f  488955c8             REX.W movq [rbp-0x38],rdx
0x32a58e49fb73    73  48894db8             REX.W movq [rbp-0x48],rcx
0x32a58e49fb77    77  660f1f840000000000   nop
0x32a58e49fb80    80  81ffbf000000         cmpl rdi,0xbf
0x32a58e49fb86    86  0f85d8020000         jnz 0x32a58e49fe64  <+0x364>
0x32a58e49fb8c    8c  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x32a58e49fb90    90  0f8603030000         jna 0x32a58e49fe99  <+0x399>
0x32a58e49fb96    96  498bbd70b30000       REX.W movq rdi,[r13+0xb370]
0x32a58e49fb9d    9d  33c0                 xorl rax,rax
0x32a58e49fb9f    9f  33f6                 xorl rsi,rsi
0x32a58e49fba1    a1  48bb0054373356700000 REX.W movq rbx,0x705633375400
0x32a58e49fbab    ab  4c8bc0               REX.W movq r8,rax
0x32a58e49fbae    ae  49ba000000e855700000 REX.W movq r10,0x7055e8000000
0x32a58e49fbb8    b8  8b7f03               movl rdi,[rdi+0x3]
0x32a58e49fbbb    bb  c1ef09               shrl rdi, 9
0x32a58e49fbbe    be  c1e704               shll rdi, 4
0x32a58e49fbc1    c1  498b3c3a             REX.W movq rdi,[r10+rdi*1]
0x32a58e49fbc5    c5  ffd7                 call rdi
0x32a58e49fbc7    c7  33d2                 xorl rdx,rdx
0x32a58e49fbc9    c9  488b4db8             REX.W movq rcx,[rbp-0x48]
0x32a58e49fbcd    cd  660f1f840000000000   nop
0x32a58e49fbd6    d6  660f1f840000000000   nop
0x32a58e49fbdf    df  660f1f840000000000   nop
0x32a58e49fbe8    e8  660f1f840000000000   nop
0x32a58e49fbf1    f1  660f1f840000000000   nop
0x32a58e49fbfa    fa  660f1f440000         nop
0x32a58e49fc00   100  8b7da8               movl rdi,[rbp-0x58]
0x32a58e49fc03   103  41baffffffff         movl r10,0xffffffff
0x32a58e49fc09   109  493bfa               REX.W cmpq rdi,r10
0x32a58e49fc0c   10c  761d                 jna 0x32a58e49fc2b  <+0x12b>
0x32a58e49fc0e   10e  bf01000000           movl rdi,0x1
0x32a58e49fc13   113  4989e2               REX.W movq r10,rsp
0x32a58e49fc16   116  4883ec08             REX.W subq rsp,0x8
0x32a58e49fc1a   11a  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49fc1e   11e  4c891424             REX.W movq [rsp],r10
0x32a58e49fc22   122  488b050affffff       REX.W movq rax,[rip+0xffffff0a]
0x32a58e49fc29   129  ffd0                 call rax
0x32a58e49fc2b   12b  4c8d040f             REX.W leaq r8,[rdi+rcx*1]
0x32a58e49fc2f   12f  4183e003             andl r8,0x3
0x32a58e49fc33   133  458bc0               movl r8,r8
0x32a58e49fc36   136  41baffffffff         movl r10,0xffffffff
0x32a58e49fc3c   13c  4d3bc2               REX.W cmpq r8,r10
0x32a58e49fc3f   13f  761d                 jna 0x32a58e49fc5e  <+0x15e>
0x32a58e49fc41   141  bf01000000           movl rdi,0x1
0x32a58e49fc46   146  4989e2               REX.W movq r10,rsp
0x32a58e49fc49   149  4883ec08             REX.W subq rsp,0x8
0x32a58e49fc4d   14d  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49fc51   151  4c891424             REX.W movq [rsp],r10
0x32a58e49fc55   155  488b05d7feffff       REX.W movq rax,[rip+0xfffffed7]
0x32a58e49fc5c   15c  ffd0                 call rax
0x32a58e49fc5e   15e  4585c0               testl r8,r8
0x32a58e49fc61   161  0f855f020000         jnz 0x32a58e49fec6  <+0x3c6>
0x32a58e49fc67   167  41b8b77a0000         movl r8,0x7ab7
0x32a58e49fc6d   16d  4d8bd0               REX.W movq r10,r8
0x32a58e49fc70   170  44871439             xchgl r10,[rcx+rdi*1]
0x32a58e49fc74   174  83c201               addl rdx,0x1
0x32a58e49fc77   177  41baffffffff         movl r10,0xffffffff
0x32a58e49fc7d   17d  493bd2               REX.W cmpq rdx,r10
0x32a58e49fc80   180  761d                 jna 0x32a58e49fc9f  <+0x19f>
0x32a58e49fc82   182  bf01000000           movl rdi,0x1
0x32a58e49fc87   187  4989e2               REX.W movq r10,rsp
0x32a58e49fc8a   18a  4883ec08             REX.W subq rsp,0x8
0x32a58e49fc8e   18e  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49fc92   192  4c891424             REX.W movq [rsp],r10
0x32a58e49fc96   196  488b0596feffff       REX.W movq rax,[rip+0xfffffe96]
0x32a58e49fc9d   19d  ffd0                 call rax
0x32a58e49fc9f   19f  90                   nop
0x32a58e49fca0   1a0  3b55c8               cmpl rdx,[rbp-0x38]
0x32a58e49fca3   1a3  0f83ca000000         jnc 0x32a58e49fd73  <+0x273>
0x32a58e49fca9   1a9  4d8bd0               REX.W movq r10,r8
0x32a58e49fcac   1ac  44871439             xchgl r10,[rcx+rdi*1]
0x32a58e49fcb0   1b0  83c201               addl rdx,0x1
0x32a58e49fcb3   1b3  41baffffffff         movl r10,0xffffffff
0x32a58e49fcb9   1b9  493bd2               REX.W cmpq rdx,r10
0x32a58e49fcbc   1bc  761d                 jna 0x32a58e49fcdb  <+0x1db>
0x32a58e49fcbe   1be  bf01000000           movl rdi,0x1
0x32a58e49fcc3   1c3  4989e2               REX.W movq r10,rsp
0x32a58e49fcc6   1c6  4883ec08             REX.W subq rsp,0x8
0x32a58e49fcca   1ca  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49fcce   1ce  4c891424             REX.W movq [rsp],r10
0x32a58e49fcd2   1d2  488b055afeffff       REX.W movq rax,[rip+0xfffffe5a]
0x32a58e49fcd9   1d9  ffd0                 call rax
0x32a58e49fcdb   1db  0f1f440000           nop
0x32a58e49fce0   1e0  3b55c8               cmpl rdx,[rbp-0x38]
0x32a58e49fce3   1e3  0f83ca000000         jnc 0x32a58e49fdb3  <+0x2b3>
0x32a58e49fce9   1e9  4d8bd0               REX.W movq r10,r8
0x32a58e49fcec   1ec  44871439             xchgl r10,[rcx+rdi*1]
0x32a58e49fcf0   1f0  83c201               addl rdx,0x1
0x32a58e49fcf3   1f3  41baffffffff         movl r10,0xffffffff
0x32a58e49fcf9   1f9  493bd2               REX.W cmpq rdx,r10
0x32a58e49fcfc   1fc  761d                 jna 0x32a58e49fd1b  <+0x21b>
0x32a58e49fcfe   1fe  bf01000000           movl rdi,0x1
0x32a58e49fd03   203  4989e2               REX.W movq r10,rsp
0x32a58e49fd06   206  4883ec08             REX.W subq rsp,0x8
0x32a58e49fd0a   20a  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49fd0e   20e  4c891424             REX.W movq [rsp],r10
0x32a58e49fd12   212  488b051afeffff       REX.W movq rax,[rip+0xfffffe1a]
0x32a58e49fd19   219  ffd0                 call rax
0x32a58e49fd1b   21b  0f1f440000           nop
0x32a58e49fd20   220  3b55c8               cmpl rdx,[rbp-0x38]
0x32a58e49fd23   223  0f83c4000000         jnc 0x32a58e49fded  <+0x2ed>
0x32a58e49fd29   229  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x32a58e49fd2d   22d  0f8670010000         jna 0x32a58e49fea3  <+0x3a3>
0x32a58e49fd33   233  4d8bd0               REX.W movq r10,r8
0x32a58e49fd36   236  44871439             xchgl r10,[rcx+rdi*1]
0x32a58e49fd3a   23a  83c201               addl rdx,0x1
0x32a58e49fd3d   23d  41baffffffff         movl r10,0xffffffff
0x32a58e49fd43   243  493bd2               REX.W cmpq rdx,r10
0x32a58e49fd46   246  761d                 jna 0x32a58e49fd65  <+0x265>
0x32a58e49fd48   248  bf01000000           movl rdi,0x1
0x32a58e49fd4d   24d  4989e2               REX.W movq r10,rsp
0x32a58e49fd50   250  4883ec08             REX.W subq rsp,0x8
0x32a58e49fd54   254  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49fd58   258  4c891424             REX.W movq [rsp],r10
0x32a58e49fd5c   25c  488b05d0fdffff       REX.W movq rax,[rip+0xfffffdd0]
0x32a58e49fd63   263  ffd0                 call rax
0x32a58e49fd65   265  3b55c8               cmpl rdx,[rbp-0x38]
0x32a58e49fd68   268  0f8292feffff         jc 0x32a58e49fc00  <+0x100>
0x32a58e49fd6e   26e  e9b4000000           jmp 0x32a58e49fe27  <+0x327>
0x32a58e49fd73   273  488d55d0             REX.W leaq rdx,[rbp-0x30]
0x32a58e49fd77   277  c70200000000         movl [rdx],0x0
0x32a58e49fd7d   27d  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x32a58e49fd84   284  52                   push rdx
0x32a58e49fd85   285  b801000000           movl rax,0x1
0x32a58e49fd8a   28a  48bb905b373356700000 REX.W movq rbx,0x705633375b90
0x32a58e49fd94   294  33f6                 xorl rsi,rsi
0x32a58e49fd96   296  4c8b1513feffff       REX.W movq r10,[rip+0xfffffe13]
0x32a58e49fd9d   29d  8b4903               movl rcx,[rcx+0x3]
0x32a58e49fda0   2a0  c1e909               shrl rcx, 9
0x32a58e49fda3   2a3  c1e104               shll rcx, 4
0x32a58e49fda6   2a6  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x32a58e49fdaa   2aa  ffd1                 call rcx
0x32a58e49fdac   2ac  33c0                 xorl rax,rax
0x32a58e49fdae   2ae  488be5               REX.W movq rsp,rbp
0x32a58e49fdb1   2b1  5d                   pop rbp
0x32a58e49fdb2   2b2  c3                   retl
0x32a58e49fdb3   2b3  488d55d8             REX.W leaq rdx,[rbp-0x28]
0x32a58e49fdb7   2b7  c70200000000         movl [rdx],0x0
0x32a58e49fdbd   2bd  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x32a58e49fdc4   2c4  52                   push rdx
0x32a58e49fdc5   2c5  488b1dc0ffffff       REX.W movq rbx,[rip+0xffffffc0]
0x32a58e49fdcc   2cc  b801000000           movl rax,0x1
0x32a58e49fdd1   2d1  33f6                 xorl rsi,rsi
0x32a58e49fdd3   2d3  4c8b15d6fdffff       REX.W movq r10,[rip+0xfffffdd6]
0x32a58e49fdda   2da  8b4903               movl rcx,[rcx+0x3]
0x32a58e49fddd   2dd  c1e909               shrl rcx, 9
0x32a58e49fde0   2e0  c1e104               shll rcx, 4
0x32a58e49fde3   2e3  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x32a58e49fde7   2e7  ffd1                 call rcx
0x32a58e49fde9   2e9  33c0                 xorl rax,rax
0x32a58e49fdeb   2eb  ebc1                 jmp 0x32a58e49fdae  <+0x2ae>
0x32a58e49fded   2ed  488d55e0             REX.W leaq rdx,[rbp-0x20]
0x32a58e49fdf1   2f1  c70200000000         movl [rdx],0x0
0x32a58e49fdf7   2f7  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x32a58e49fdfe   2fe  52                   push rdx
0x32a58e49fdff   2ff  488b1d86ffffff       REX.W movq rbx,[rip+0xffffff86]
0x32a58e49fe06   306  b801000000           movl rax,0x1
0x32a58e49fe0b   30b  33f6                 xorl rsi,rsi
0x32a58e49fe0d   30d  4c8b159cfdffff       REX.W movq r10,[rip+0xfffffd9c]
0x32a58e49fe14   314  8b4903               movl rcx,[rcx+0x3]
0x32a58e49fe17   317  c1e909               shrl rcx, 9
0x32a58e49fe1a   31a  c1e104               shll rcx, 4
0x32a58e49fe1d   31d  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x32a58e49fe21   321  ffd1                 call rcx
0x32a58e49fe23   323  33c0                 xorl rax,rax
0x32a58e49fe25   325  eb87                 jmp 0x32a58e49fdae  <+0x2ae>
0x32a58e49fe27   327  488d55e8             REX.W leaq rdx,[rbp-0x18]
0x32a58e49fe2b   32b  c70200000000         movl [rdx],0x0
0x32a58e49fe31   331  498b8d70b30000       REX.W movq rcx,[r13+0xb370]
0x32a58e49fe38   338  52                   push rdx
0x32a58e49fe39   339  488b1d4cffffff       REX.W movq rbx,[rip+0xffffff4c]
0x32a58e49fe40   340  b801000000           movl rax,0x1
0x32a58e49fe45   345  33f6                 xorl rsi,rsi
0x32a58e49fe47   347  4c8b1562fdffff       REX.W movq r10,[rip+0xfffffd62]
0x32a58e49fe4e   34e  8b4903               movl rcx,[rcx+0x3]
0x32a58e49fe51   351  c1e909               shrl rcx, 9
0x32a58e49fe54   354  c1e104               shll rcx, 4
0x32a58e49fe57   357  498b0c0a             REX.W movq rcx,[r10+rcx*1]
0x32a58e49fe5b   35b  ffd1                 call rcx
0x32a58e49fe5d   35d  33c0                 xorl rax,rax
0x32a58e49fe5f   35f  488be5               REX.W movq rsp,rbp
0x32a58e49fe62   362  5d                   pop rbp
0x32a58e49fe63   363  c3                   retl
0x32a58e49fe64   364  498b9570b30000       REX.W movq rdx,[r13+0xb370]
0x32a58e49fe6b   36b  b994000000           movl rcx,0x94
0x32a58e49fe70   370  51                   push rcx
0x32a58e49fe71   371  48bb2006ae3256700000 REX.W movq rbx,0x705632ae0620
0x32a58e49fe7b   37b  b801000000           movl rax,0x1
0x32a58e49fe80   380  33f6                 xorl rsi,rsi
0x32a58e49fe82   382  4c8b1527fdffff       REX.W movq r10,[rip+0xfffffd27]
0x32a58e49fe89   389  8b5203               movl rdx,[rdx+0x3]
0x32a58e49fe8c   38c  c1ea09               shrl rdx, 9
0x32a58e49fe8f   38f  c1e204               shll rdx, 4
0x32a58e49fe92   392  498b1412             REX.W movq rdx,[r10+rdx*1]
0x32a58e49fe96   396  ffd2                 call rdx
0x32a58e49fe98   398  cc                   int3l
0x32a58e49fe99   399  e872f4ffff           call 0x32a58e49f310  (jump table)
0x32a58e49fe9e   39e  e9f3fcffff           jmp 0x32a58e49fb96  <+0x96>
0x32a58e49fea3   3a3  488955c0             REX.W movq [rbp-0x40],rdx
0x32a58e49fea7   3a7  48897db0             REX.W movq [rbp-0x50],rdi
0x32a58e49feab   3ab  e860f4ffff           call 0x32a58e49f310  (jump table)
0x32a58e49feb0   3b0  8b55c0               movl rdx,[rbp-0x40]
0x32a58e49feb3   3b3  41b8b77a0000         movl r8,0x7ab7
0x32a58e49feb9   3b9  488b4db8             REX.W movq rcx,[rbp-0x48]
0x32a58e49febd   3bd  488b7db0             REX.W movq rdi,[rbp-0x50]
0x32a58e49fec1   3c1  e96dfeffff           jmp 0x32a58e49fd33  <+0x233>
0x32a58e49fec6   3c6  e895f1ffff           call 0x32a58e49f060  (jump table)
0x32a58e49fecb   3cb  bf3c000000           movl rdi,0x3c
0x32a58e49fed0   3d0  4989e2               REX.W movq r10,rsp
0x32a58e49fed3   3d3  4883ec08             REX.W subq rsp,0x8
0x32a58e49fed7   3d7  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49fedb   3db  4c891424             REX.W movq [rsp],r10
0x32a58e49fedf   3df  488b054dfcffff       REX.W movq rax,[rip+0xfffffc4d]
0x32a58e49fee6   3e6  ffd0                 call rax
0x32a58e49fee8   3e8  90                   nop
0x32a58e49fee9   3e9  0f1f00               nop

Protected instructions:
 pc offset
       170         
       1ac         
       1ec         
       236         

Source positions:
 pc offset  position
        9d         3
       167        15
       284        36
       36b         0
       3a3         7
       3c6        15

Safepoints (stack slots = 13, entries = 1, byte size = 15)
0x32a58e49fbc7     c7  slots (sp->fp): 0000000000000

RelocInfo (size = 19)
0x32a58e49fb33  external reference (0x70563189b4d0)
0x32a58e49fba3  external reference (0x705633375400)
0x32a58e49fbb0  external reference (0x7055e8000000)
0x32a58e49fd8c  external reference (0x705633375b90)
0x32a58e49fe73  external reference (0x705632ae0620)
0x32a58e49fe9a  wasm stub call  (0x32a58e49f310)
0x32a58e49feac  wasm stub call  (0x32a58e49f310)
0x32a58e49fec7  wasm stub call  (0x32a58e49f060)

--- End code ---
   1: } -> 0
local decls count: 0
  +290  skip                : 1 bytes
wasm-decode 0x617eac64e072...0x617eac64e07a (module+291, 8 bytes)
[]; [i32:s0x24]
  @1        #local.get                     | B1 |  i
[]; [i32:s0x24, i32:rax]
[DEBUG]AtomicOp called
  @3        #i32.atomic.load               | B1 |  i
[]; [i32:s0x24, i32:rdx]
  @7        #end                           |
  @7        #(implicit) return             |  | 
wasm-decode ok

--- WebAssembly code ---
name: wasm-function[3]
index: 3
kind: wasm function
compiler: Liftoff
Body (size = 448 = 408 + 40 padding)
Instructions (size = 392)
0x32a58e49ff00     0  55                   push rbp
0x32a58e49ff01     1  4889e5               REX.W movq rbp,rsp
0x32a58e49ff04     4  6a08                 push 0x8
0x32a58e49ff06     6  56                   push rsi
0x32a58e49ff07     7  4881ec18000000       REX.W subq rsp,0x18
0x32a58e49ff0e     e  8bc0                 movl rax,rax
0x32a58e49ff10    10  8b4eff               movl rcx,[rsi-0x1]
0x32a58e49ff13    13  4903ce               REX.W addq rcx,r14
0x32a58e49ff16    16  0fb74907             movzxwl rcx,[rcx+0x7]
0x32a58e49ff1a    1a  81f9bf000000         cmpl rcx,0xbf
0x32a58e49ff20    20  0f8420000000         jz 0x32a58e49ff46  <+0x46>
0x32a58e49ff26    26  bf4a000000           movl rdi,0x4a
0x32a58e49ff2b    2b  4989e2               REX.W movq r10,rsp
0x32a58e49ff2e    2e  4883ec08             REX.W subq rsp,0x8
0x32a58e49ff32    32  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49ff36    36  4c891424             REX.W movq [rsp],r10
0x32a58e49ff3a    3a  48b8d0b4893156700000 REX.W movq rax,0x70563189b4d0
0x32a58e49ff44    44  ffd0                 call rax
0x32a58e49ff46    46  493b65a0             REX.W cmpq rsp,[r13-0x60]
0x32a58e49ff4a    4a  0f86d9000000         jna 0x32a58e4a0029  <+0x129>
0x32a58e49ff50    50  8945dc               movl [rbp-0x24],rax
0x32a58e49ff53    53  e848f4ffff           call 0x32a58e49f3a0  (jump table)
0x32a58e49ff58    58  8b45dc               movl rax,[rbp-0x24]
0x32a58e49ff5b    5b  8bc8                 movl rcx,rax
0x32a58e49ff5d    5d  83e103               andl rcx,0x3
0x32a58e49ff60    60  85c9                 testl rcx,rcx
0x32a58e49ff62    62  0f85d1000000         jnz 0x32a58e4a0039  <+0x139>
0x32a58e49ff68    68  41baffffffff         movl r10,0xffffffff
0x32a58e49ff6e    6e  493bc2               REX.W cmpq rax,r10
0x32a58e49ff71    71  761d                 jna 0x32a58e49ff90  <+0x90>
0x32a58e49ff73    73  bf01000000           movl rdi,0x1
0x32a58e49ff78    78  4989e2               REX.W movq r10,rsp
0x32a58e49ff7b    7b  4883ec08             REX.W subq rsp,0x8
0x32a58e49ff7f    7f  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49ff83    83  4c891424             REX.W movq [rsp],r10
0x32a58e49ff87    87  488b05aeffffff       REX.W movq rax,[rip+0xffffffae]
0x32a58e49ff8e    8e  ffd0                 call rax
0x32a58e49ff90    90  488b75f0             REX.W movq rsi,[rbp-0x10]
0x32a58e49ff94    94  488b561f             REX.W movq rdx,[rsi+0x1f]
0x32a58e49ff98    98  b903000000           movl rcx,0x3
0x32a58e49ff9d    9d  48f7d9               REX.W negq rcx
0x32a58e49ffa0    a0  4803ca               REX.W addq rcx,rdx
0x32a58e49ffa3    a3  483bc1               REX.W cmpq rax,rcx
0x32a58e49ffa6    a6  0f83af000000         jnc 0x32a58e4a005b  <+0x15b>
0x32a58e49ffac    ac  488b4e17             REX.W movq rcx,[rsi+0x17]
0x32a58e49ffb0    b0  41baffffffff         movl r10,0xffffffff
0x32a58e49ffb6    b6  493bc2               REX.W cmpq rax,r10
0x32a58e49ffb9    b9  761d                 jna 0x32a58e49ffd8  <+0xd8>
0x32a58e49ffbb    bb  bf01000000           movl rdi,0x1
0x32a58e49ffc0    c0  4989e2               REX.W movq r10,rsp
0x32a58e49ffc3    c3  4883ec08             REX.W subq rsp,0x8
0x32a58e49ffc7    c7  4883e4f0             REX.W andq rsp,0xf0
0x32a58e49ffcb    cb  4c891424             REX.W movq [rsp],r10
0x32a58e49ffcf    cf  488b0566ffffff       REX.W movq rax,[rip+0xffffff66]
0x32a58e49ffd6    d6  ffd0                 call rax
0x32a58e49ffd8    d8  8b1401               movl rdx,[rcx+rax*1]
0x32a58e49ffdb    db  8955d8               movl [rbp-0x28],rdx
0x32a58e49ffde    de  488d45d8             REX.W leaq rax,[rbp-0x28]
0x32a58e49ffe2    e2  e8c9f3ffff           call 0x32a58e49f3b0  (jump table)
0x32a58e49ffe7    e7  4c8b55f0             REX.W movq r10,[rbp-0x10]
0x32a58e49ffeb    eb  4d8b525f             REX.W movq r10,[r10+0x5f]
0x32a58e49ffef    ef  41816a0c23010000     subl [r10+0xc],0x123
0x32a58e49fff7    f7  0f8880000000         js 0x32a58e4a007d  <+0x17d>
0x32a58e49fffd    fd  8b45d8               movl rax,[rbp-0x28]
0x32a58e4a0000   100  48837df808           REX.W cmpq [rbp-0x8],0x8
0x32a58e4a0005   105  741d                 jz 0x32a58e4a0024  <+0x124>
0x32a58e4a0007   107  bf30000000           movl rdi,0x30
0x32a58e4a000c   10c  4989e2               REX.W movq r10,rsp
0x32a58e4a000f   10f  4883ec08             REX.W subq rsp,0x8
0x32a58e4a0013   113  4883e4f0             REX.W andq rsp,0xf0
0x32a58e4a0017   117  4c891424             REX.W movq [rsp],r10
0x32a58e4a001b   11b  488b051affffff       REX.W movq rax,[rip+0xffffff1a]
0x32a58e4a0022   122  ffd0                 call rax
0x32a58e4a0024   124  488be5               REX.W movq rsp,rbp
0x32a58e4a0027   127  5d                   pop rbp
0x32a58e4a0028   128  c3                   retl
0x32a58e4a0029   129  50                   push rax
0x32a58e4a002a   12a  e8e1f2ffff           call 0x32a58e49f310  (jump table)
0x32a58e4a002f   12f  58                   pop rax
0x32a58e4a0030   130  488b75f0             REX.W movq rsi,[rbp-0x10]
0x32a58e4a0034   134  e917ffffff           jmp 0x32a58e49ff50  <+0x50>
0x32a58e4a0039   139  e822f0ffff           call 0x32a58e49f060  (jump table)
0x32a58e4a003e   13e  bf3c000000           movl rdi,0x3c
0x32a58e4a0043   143  4989e2               REX.W movq r10,rsp
0x32a58e4a0046   146  4883ec08             REX.W subq rsp,0x8
0x32a58e4a004a   14a  4883e4f0             REX.W andq rsp,0xf0
0x32a58e4a004e   14e  4c891424             REX.W movq [rsp],r10
0x32a58e4a0052   152  488b05e3feffff       REX.W movq rax,[rip+0xfffffee3]
0x32a58e4a0059   159  ffd0                 call rax
0x32a58e4a005b   15b  e8f0efffff           call 0x32a58e49f050  (jump table)
0x32a58e4a0060   160  bf3c000000           movl rdi,0x3c
0x32a58e4a0065   165  4989e2               REX.W movq r10,rsp
0x32a58e4a0068   168  4883ec08             REX.W subq rsp,0x8
0x32a58e4a006c   16c  4883e4f0             REX.W andq rsp,0xf0
0x32a58e4a0070   170  4c891424             REX.W movq [rsp],r10
0x32a58e4a0074   174  488b05c1feffff       REX.W movq rax,[rip+0xfffffec1]
0x32a58e4a007b   17b  ffd0                 call rax
0x32a58e4a007d   17d  e8def0ffff           call 0x32a58e49f160  (jump table)
0x32a58e4a0082   182  e976ffffff           jmp 0x32a58e49fffd  <+0xfd>
0x32a58e4a0087   187  90                   nop

Source positions:
 pc offset  position
        53         1
        e2         7
       12a         0  statement
       139         3  statement
       15b         3  statement
       17d         7  statement

Safepoints (stack slots = 8, entries = 1, byte size = 14)
0x32a58e49ff58     58  slots (sp->fp): 00000000

RelocInfo (size = 0)

--- End code ---
   1: ~wasm-function[3] {
   1: } -> 31415
   1: } -> 0x287800000011 <undefined>
   1: ~workerN.onmessage+0(this=0x287800081a25 <JSGlobalProxy>, 0x28780028c301 <Object map = 0x28780009a58d>) {
Resolving worker message
   1: } -> 0x287800000011 <undefined>
   1: ~+0(this=0x287800841a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x287800841a25 <JSGlobalProxy>) {
   2:  } -> 0x287800000011 <undefined>
   1: } -> 0x287800000011 <undefined>
   1: ~onmessage+0(this=0x287800841a25 <JSGlobalProxy>, 0x28780048900d <Object map = 0x287800859b19>) {
   1: *wasm-function[6] {
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 31415
   1: } -> 0x287800000011 <undefined>
   1: ~workerN.onmessage+0(this=0x287800081a25 <JSGlobalProxy>, 0x28780028c3b1 <Object map = 0x28780009a58d>) {
Resolving worker message
   1: } -> 0x287800000011 <undefined>
   1: ~+0(this=0x2878009c1a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x2878009c1a25 <JSGlobalProxy>) {
   2:  } -> 0x287800000011 <undefined>
   1: } -> 0x287800000011 <undefined>
   1: ~onmessage+0(this=0x2878009c1a25 <JSGlobalProxy>, 0x2878005c900d <Object map = 0x2878009d9b19>) {
   1: *wasm-function[6] {
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 31415
   1: } -> 0x287800000011 <undefined>
   1: ~workerN.onmessage+0(this=0x287800081a25 <JSGlobalProxy>, 0x28780028c461 <Object map = 0x28780009a58d>) {
Resolving worker message
   1: } -> 0x287800000011 <undefined>
   1: ~+0(this=0x287800a01a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x287800a01a25 <JSGlobalProxy>) {
   2:  } -> 0x287800000011 <undefined>
   1: } -> 0x287800000011 <undefined>
   1: ~onmessage+0(this=0x287800a01a25 <JSGlobalProxy>, 0x28780070900d <Object map = 0x287800a19b19>) {
   1: *wasm-function[6] {
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 31415
   1: } -> 0x287800000011 <undefined>
   1: ~workerN.onmessage+0(this=0x287800081a25 <JSGlobalProxy>, 0x28780028c511 <Object map = 0x28780009a58d>) {
Resolving worker message
   1: } -> 0x287800000011 <undefined>
   1: ~+0(this=0x287800a41a25 <JSGlobalProxy>) {
   2:  ~workerCode+0(this=0x287800a41a25 <JSGlobalProxy>) {
   2:  } -> 0x287800000011 <undefined>
   1: } -> 0x287800000011 <undefined>
   1: ~onmessage+0(this=0x287800a41a25 <JSGlobalProxy>, 0x28780088900d <Object map = 0x287800a59b19>) {
   1: *wasm-function[6] {
   1: } -> 0
   1: ~wasm-function[3] {
   1: } -> 31415
   1: } -> 0x287800000011 <undefined>
   1: ~workerN.onmessage+0(this=0x287800081a25 <JSGlobalProxy>, 0x28780028c5c1 <Object map = 0x28780009a58d>) {
Resolving worker message
   1: } -> 0x287800000011 <undefined>
   2:  } -> 0x287800289b4d <Promise map = 0x2878000899ad>
##Benchmark Start##
Worker 0 Value: 31415 Time (ms): 62.072
Worker 1 Value: 31415 Time (ms): 43.517999999999915
Worker 2 Value: 31415 Time (ms): 44.059999999999945
Worker 3 Value: 31415 Time (ms): 43.43399999999997
Worker 4 Value: 31415 Time (ms): 35.42600000000016
   1: ~wasm-function[3] {
   1: } -> 31415
Final total count: 31415
##Benchmark End##
   2:  } -> 0x287800289a85 <Promise map = 0x2878000899ad>
   1: ~+0(this=0x287800081a25 <JSGlobalProxy>) {
Finished.
   1: } -> 0x287800000011 <undefined>
  +0  module header       : 8 bytes
  +8  uint8_t             : 01 = 1
  +9  section size        : 0c = 12
  +10  section payload     : 12 bytes
  +22  uint8_t             : 02 = 2
  +23  section size        : 10 = 16
  +24  section payload     : 16 bytes
  +40  uint8_t             : 03 = 3
  +41  section size        : 09 = 9
  +42  section payload     : 9 bytes
  +51  uint8_t             : 07 = 7
  +52  section size        : 9e 01 = 158
  +54  section payload     : 158 bytes
  +212  uint8_t             : 0a = 10
  +213  section size        : e2 01 = 226
